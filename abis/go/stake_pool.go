// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	TransferOutTimeout    *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}

// FeeDistributionData is an auto generated low-level Go binding around an user-defined struct.
type FeeDistributionData struct {
	Reward   *big.Int
	Deposit  *big.Int
	Withdraw *big.Int
}

// StakePoolClaimRequest is an auto generated low-level Go binding around an user-defined struct.
type StakePoolClaimRequest struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}

// StakePoolMetaData contains all meta data concerning the StakePool contract.
var StakePoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BNBTransferToUserFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantBeMoreThan1e18\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantClaimBeforeDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantSetMoreThan30PercentFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CooldownPeriodCantBeMoreThan30Days\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"DustNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientClaimReserve\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFundsToSatisfyClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"}],\"name\":\"LessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumeratorMoreThanBasis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausablePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ToIndexMustBeGreaterThanFromIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMintingToSelfNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferToSelfNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferOutFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnexpectedlyReceivedTokensForSomeoneElse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structStakePool.ClaimRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"}],\"name\":\"EpochUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortCircuitAmount\",\"type\":\"uint256\"}],\"name\":\"InitiateDelegation_ShortCircuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitiateDelegation_Success\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOutAmount\",\"type\":\"uint256\"}],\"name\":\"InitiateDelegation_TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unbondedAmount\",\"type\":\"uint256\"}],\"name\":\"UnbondingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbUnbonding\",\"type\":\"uint256\"}],\"name\":\"UnbondingInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressStore\",\"outputs\":[{\"internalType\":\"contractIAddressStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbToUnbond\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimReqs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrossChainTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferOutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"}],\"name\":\"epochUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getPaginatedClaimRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"structStakePool.ClaimRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAddressStore\",\"name\":\"addressStore_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrossChainTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferOutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"structConfig.Data\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondingFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbUnbonding_\",\"type\":\"uint256\"}],\"name\":\"unbondingInitiated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrossChainTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferOutTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"structConfig.Data\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612fb580620000f46000396000f3fe6080604052600436106101e65760003560e01c806379502c5511610102578063b150377411610095578063d1058e5911610064578063d1058e59146106cf578063d547741f146106e4578063f773d87d14610704578063fa6c2f7d1461072457600080fd5b8063b150377414610667578063c773c8f714610689578063ca15c873146106a7578063d0e30db0146106c757600080fd5b80638d0f4bd9116100d15780638d0f4bd9146105da5780639010d07c146105fa57806391d1485414610632578063a217fddf1461065257600080fd5b806379502c55146104c25780638456cb591461056f5780638b2bf29f146105845780638be78083146105a457600080fd5b80633f4ba83a1161017a5780635d97914c116101495780635d97914c1461044b5780636eb959401461046057806372bd5c941461047557806375ccc37a1461049557600080fd5b80633f4ba83a146103f45780633fe5f0541461040957806354cc6d9d1461041e5780635c975abb1461043357600080fd5b80632f2ff15d116101b65780632f2ff15d1461036457806336568abe14610384578063379607f5146103a45780633ba0b9a9146103c457600080fd5b806223de29146102b157806301ffc9a7146102d1578063248a9ca314610306578063291532ed1461034457600080fd5b366102ac576101f3610739565b60c960009054906101000a90046001600160a01b03166001600160a01b03166388d1161d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024157600080fd5b505afa158015610255573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610279919061296e565b6001600160a01b0316336001600160a01b0316146102aa5760405163399a77fd60e01b815260040160405180910390fd5b005b600080fd5b3480156102bd57600080fd5b506102aa6102cc36600461298b565b61075f565b3480156102dd57600080fd5b506102f16102ec366004612b2a565b610901565b60405190151581526020015b60405180910390f35b34801561031257600080fd5b50610336610321366004612abf565b60009081526065602052604090206001015490565b6040519081526020016102fd565b34801561035057600080fd5b506102aa61035f366004612b54565b61092c565b34801561037057600080fd5b506102aa61037f366004612ad8565b610a41565b34801561039057600080fd5b506102aa61039f366004612ad8565b610a66565b3480156103b057600080fd5b506102aa6103bf366004612abf565b610ae4565b3480156103d057600080fd5b5060d85460d9546103df919082565b604080519283526020830191909152016102fd565b34801561040057600080fd5b506102aa610b27565b34801561041557600080fd5b5060d754610336565b34801561042a57600080fd5b506102aa610b7b565b34801561043f57600080fd5b5060d35460ff166102f1565b34801561045757600080fd5b5060d554610336565b34801561046c57600080fd5b5060d654610336565b34801561048157600080fd5b506102aa610490366004612abf565b610cf4565b3480156104a157600080fd5b506104b56104b0366004612a68565b610f32565b6040516102fd9190612c98565b3480156104ce57600080fd5b5060ca5460cb5460cc5460cd5460ce5460cf546040805160608101825260d054815260d154602082015260d25491810191909152610518966001600160a01b031695949392919087565b604080516001600160a01b039098168852602080890197909752878101959095526060870193909352608086019190915260a0850152805160c08501529182015160e08401520151610100820152610120016102fd565b34801561057b57600080fd5b506102aa6110ec565b34801561059057600080fd5b506102aa61059f366004612abf565b61113c565b3480156105b057600080fd5b506103366105bf366004612951565b6001600160a01b0316600090815260da602052604090205490565b3480156105e657600080fd5b506102aa6105f5366004612b8b565b6111c4565b34801561060657600080fd5b5061061a610615366004612b08565b611207565b6040516001600160a01b0390911681526020016102fd565b34801561063e57600080fd5b506102f161064d366004612ad8565b611226565b34801561065e57600080fd5b50610336600081565b34801561067357600080fd5b50610336600080516020612f6083398151915281565b34801561069557600080fd5b5060c9546001600160a01b031661061a565b3480156106b357600080fd5b506103366106c2366004612abf565b611251565b6102aa611268565b3480156106db57600080fd5b506102aa611524565b3480156106f057600080fd5b506102aa6106ff366004612ad8565b611588565b34801561071057600080fd5b506103df61071f366004612a3c565b6115ad565b34801561073057600080fd5b506102aa6115e9565b60d35460ff161561075d5760405163928dfa7760e01b815260040160405180910390fd5b565b610767610739565b61076f6118c4565b60408051808201909152600a81526915da5d1a191c985dd85b60b21b602082015260ce548661079f8383836118ef565b60c960009054906101000a90046001600160a01b03166001600160a01b031663e016dedc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ed57600080fd5b505afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610825919061296e565b6001600160a01b0316336001600160a01b0316146108565760405163399a77fd60e01b815260040160405180910390fd5b6001600160a01b038a1661087d5760405163eb577da760e01b815260040160405180910390fd5b6001600160a01b038a163014156108a7576040516315bddb7b60e01b815260040160405180910390fd5b6001600160a01b03891630146108e0576040516338a5c37560e01b81526001600160a01b038a1660048201526024015b60405180910390fd5b6108ea8a8961194c565b5050506108f7600160d455565b5050505050505050565b60006001600160e01b03198216635a05180f60e01b1480610926575061092682611c55565b92915050565b600054610100900460ff161580801561094c5750600054600160ff909116105b806109665750303b158015610966575060005460ff166001145b6109c95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108d7565b6000805460ff1916600117905580156109ec576000805461ff0019166101001790555b6109f68383611c8a565b8015610a3c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600082815260656020526040902060010154610a5c81611cbb565b610a3c8383611cc5565b6001600160a01b0381163314610ad65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108d7565b610ae08282611ce7565b5050565b610aec610739565b610af46118c4565b610afd81611d09565b610b1a57604051637e868a7360e01b815260040160405180910390fd5b610b24600160d455565b50565b6000610b3281611cbb565b610b3a611f87565b60d3805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b610b83610739565b600080516020612f60833981519152610b9b81611cbb565b60c954604080516388d1161d60e01b815290516000926001600160a01b0316916388d1161d916004808301926020929190829003018186803b158015610be057600080fd5b505afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c18919061296e565b6001600160a01b03166347066d026040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c5257600080fd5b505af1158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190612ba8565b90508060d66000828254610c9e9190612e3d565b925050819055508060d76000828254610cb79190612db3565b90915550506040518181527f31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5906020015b60405180910390a15050565b610cfc610739565b600080516020612f60833981519152610d1481611cbb565b60d054600090610d249084611fa9565b90506000818460d860000154610d3a9190612db3565b610d449190612e3d565b60d954610d519084612ddf565b610d5b9190612dcb565b9050610d88604051806040016040528086815260200183815250600060d8611fc59092919063ffffffff16565b60c960009054906101000a90046001600160a01b03166001600160a01b031663e016dedc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e919061296e565b6001600160a01b031663dcdc7dd060c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea2919061296e565b836040518363ffffffff1660e01b8152600401610ec0929190612c62565b600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b505060408051878152602081018590527fcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1935001905060405180910390a150505050565b6001600160a01b038316600090815260da60205260409020546060908310610f705760405163112517f360e21b8152600481018490526024016108d7565b818310610f9a57604051630dfc263960e01b815260048101849052602481018390526044016108d7565b6001600160a01b038416600090815260da6020526040902054821115610fd6576001600160a01b038416600090815260da602052604090205491505b6000610fe28484612e3d565b67ffffffffffffffff811115610ffa57610ffa612f34565b60405190808252806020026020018201604052801561103f57816020015b60408051808201909152600080825260208201528152602001906001900390816110185790505b50905060005b61104f8585612e3d565b8110156110e3576001600160a01b038616600090815260da602052604090206110788287612db3565b8154811061108857611088612f1e565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508282815181106110c7576110c7612f1e565b6020026020010181905250806110dc90612e97565b9050611045565b50949350505050565b60006110f781611cbb565b6110ff610739565b60d3805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610b70565b611144610739565b600080516020612f6083398151915261115c81611cbb565b61116582612058565b60d560008282546111769190612dfe565b925050819055508160d6600082825461118f9190612db3565b90915550506040518281527ffcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba8790602001610ce8565b60006111cf81611cbb565b6111da60ca836120c6565b6040517ffe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d190600090a15050565b600082815260976020526040812061121f90836120d9565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152609760205260408120610926906120e5565b611270610739565b6112786118c4565b60408051808201909152600781526611195c1bdcda5d60ca1b602082015260cd54346112a58383836118ef565b3460006112b360d8836120ef565b60d1549091506000906112c69083611fa9565b905060006112d48284612e3d565b9050611301604051806040016040528086815260200185815250600060d8611fc59092919063ffffffff16565b60c95460408051633805b7b760e21b815290516000926001600160a01b03169163e016dedc916004808301926020929190829003018186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e919061296e565b604051630dcdc7dd60e41b81529091506001600160a01b0382169063dcdc7dd0906113af9033908690600401612c62565b600060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b5050505060008311156114d057806001600160a01b031663dcdc7dd060c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b15801561144757600080fd5b505afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f919061296e565b856040518363ffffffff1660e01b815260040161149d929190612c62565b600060405180830381600087803b1580156114b757600080fd5b505af11580156114cb573d6000803e3d6000fd5b505050505b60408051348152602081018490524281830152905133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e919081900360600190a2505050505050505061075d600160d455565b61152c610739565b6115346118c4565b33600090815260da6020526040812054905b8181101561157c5761155781611d09565b1561156c5761156582612e80565b9150611546565b61157581612e97565b9050611546565b505061075d600160d455565b6000828152606560205260409020600101546115a381611cbb565b610a3c8383611ce7565b60da60205281600052604060002081815481106115c957600080fd5b600091825260209091206002909102018054600190910154909250905082565b6115f1610739565b600080516020612f6083398151915261160981611cbb565b600060d754476116199190612e3d565b9050600061162c6402540be40083612eb2565b6116369083612e3d565b905060006110046001600160a01b031663149d14d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190612ba8565b60cb549091506116bd9082612db3565b82106117f15760006116cf8284612e3d565b60ca5460cc549192506000916110049163aa7415f591879185916001600160a01b039091169087906117019042612db3565b6040516001600160e01b031960e088901b1681526001600160a01b039485166004820152939092166024840152604483015267ffffffffffffffff1660648201526084016020604051808303818588803b15801561175e57600080fd5b505af1158015611772573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117979190612a9d565b9050806117b75760405163cefaffeb60e01b815260040160405180910390fd5b6040518281527f12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa9060200160405180910390a15050611895565b6000831180156118035750600060d554135b1561189557600061181384612058565b60d5541315611823575082611828565b5060d5545b61183181612058565b60d560008282546118429190612dfe565b925050819055508060d7600082825461185b9190612db3565b90915550506040518181527f398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd19060200160405180910390a1505b6040517fab39d195fb15cf2b785ee487c131ff8eb2b3c97d2750756b63e3b11e81a11cfb90600090a150505050565b600260d45414156118e857604051633ee5aeb560e01b815260040160405180910390fd5b600260d455565b8181101561191657828282604051631a14281160e01b81526004016108d793929190612d02565b60006119228383612eb2565b9050801561194657604051634301c31b60e01b8152600481018290526024016108d7565b50505050565b60d25460009061195c9083611fa9565b9050600061196a8284612e3d565b9050600061197960d88361211f565b6001600160a01b038616600090815260da602090815260408083208151808301909252848252428284019081528154600181810184559286529390942091516002909302909101918255915191015590506119d381612058565b60d560008282546119e49190612d72565b90915550506040805180820190915281815260208101839052611a0b9060d8906001611fc5565b60c95460408051633805b7b760e21b815290516000926001600160a01b03169163e016dedc916004808301926020929190829003018186803b158015611a5057600080fd5b505afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a88919061296e565b6040805163fe9d930360e01b8152600481018690526024810191909152600060448201529091506001600160a01b0382169063fe9d930390606401600060405180830381600087803b158015611add57600080fd5b505af1158015611af1573d6000803e3d6000fd5b505050506000841115611c0257806001600160a01b0316639bd9bbc660c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5b57600080fd5b505afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b93919061296e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526060604482015260006064820152608401600060405180830381600087803b158015611be957600080fd5b505af1158015611bfd573d6000803e3d6000fd5b505050505b6040805186815260208101849052428183015290516001600160a01b038816917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94919081900360600190a2505050505050565b60006001600160e01b03198216637965db0b60e01b148061092657506301ffc9a760e01b6001600160e01b0319831614610926565b600054610100900460ff16611cb15760405162461bcd60e51b81526004016108d790612d27565b610ae08282612167565b610b24813361227e565b611ccf82826122e2565b6000828152609760205260409020610a3c9082612368565b611cf1828261237d565b6000828152609760205260409020610a3c90826123e4565b33600090815260da60205260408120548210611d3b5760405163112517f360e21b8152600481018390526024016108d7565b33600090815260da60205260408120805484908110611d5c57611d5c612f1e565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050611d94816123f9565b611da15750600092915050565b8051471015611dc35760405163e723ea5960e01b815260040160405180910390fd5b805160d7541015611de75760405163df536f6160e01b815260040160405180910390fd5b805160d78054600090611dfb908490612e3d565b909155505033600090815260da602052604090208054611e1d90600190612e3d565b81548110611e2d57611e2d612f1e565b906000526020600020906002020160da6000336001600160a01b03166001600160a01b031681526020019081526020016000208481548110611e7157611e71612f1e565b600091825260208083208454600290930201918255600193840154939091019290925533815260da90915260409020805480611eaf57611eaf612f08565b60008281526020812060026000199390930192830201818155600101819055915581516040513391908381818185875af1925050503d8060008114611f10576040519150601f19603f3d011682016040523d82523d6000602084013e611f15565b606091505b5050905080611f375760405163243d868360e11b815260040160405180910390fd5b6040805183518152602080850151908201524281830152905133917f68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6919081900360600190a25060019392505050565b60d35460ff1661075d5760405162c5619760e61b815260040160405180910390fd5b600064174876e800611fbb8484612ddf565b61121f9190612dcb565b6000816001811115611fd957611fd9612ef2565b141561201c57815183548490600090611ff3908490612db3565b90915550506020820151600184018054600090612011908490612db3565b90915550610a3c9050565b815183548490600090612030908490612e3d565b9091555050602082015160018401805460009061204e908490612e3d565b9091555050505050565b60006001600160ff1b038211156120c25760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016108d7565b5090565b6120cf81612415565b610ae082826124e7565b600061121f8383612566565b6000610926825490565b8154600090158061210257506001830154155b1561210e575080610926565b82546001840154611fbb9084612ddf565b815460009081906121309084612ddf565b600185015490915080821080612144575080155b1561215457600092505050610926565b61215e8183612dcb565b95945050505050565b600054610100900460ff1661218e5760405162461bcd60e51b81526004016108d790612d27565b60c980546001600160a01b0319166001600160a01b0384161790556121b460ca826120c6565b60d3805460ff1916600190811790915560d455600060d581905560d681905560d781905560d881905560d9556040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801561225957600080fd5b505af115801561226d573d6000803e3d6000fd5b50505050610ae06000801b33611cc5565b6122888282611226565b610ae0576122a0816001600160a01b03166014612590565b6122ab836020612590565b6040516020016122bc929190612bed565b60408051601f198184030181529082905262461bcd60e51b82526108d791600401612cef565b6122ec8282611226565b610ae05760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556123243390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061121f836001600160a01b03841661272c565b6123878282611226565b15610ae05760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061121f836001600160a01b03841661277b565b60cf54602082015160009161240d91612db3565b421192915050565b6124218160c00161286e565b602081013561244357604051633019509960e21b815260040160405180910390fd5b604081013561246557604051633019509960e21b815260040160405180910390fd5b670de0b6b3a76400008160600135111561249257604051630383d89960e11b815260040160405180910390fd5b670de0b6b3a7640000816080013511156124bf57604051630383d89960e11b815260040160405180910390fd5b62278d008160a001351115610b2457604051633c77abc560e21b815260040160405180910390fd5b6124f46020820182612951565b82546001600160a01b0319166001600160a01b03919091161782556020810135600183015560408101356002830155606081013560038301556080810135600483015560a08101356005830155610ae06006830160c08301803582556020810135600183015560400135600290910155565b600082600001828154811061257d5761257d612f1e565b9060005260206000200154905092915050565b6060600061259f836002612ddf565b6125aa906002612db3565b67ffffffffffffffff8111156125c2576125c2612f34565b6040519080825280601f01601f1916602001820160405280156125ec576020820181803683370190505b509050600360fc1b8160008151811061260757612607612f1e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061263657612636612f1e565b60200101906001600160f81b031916908160001a905350600061265a846002612ddf565b612665906001612db3565b90505b60018111156126dd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061269957612699612f1e565b1a60f81b8282815181106126af576126af612f1e565b60200101906001600160f81b031916908160001a90535060049490941c936126d681612e80565b9050612668565b50831561121f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108d7565b600081815260018301602052604081205461277357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610926565b506000610926565b6000818152600183016020526040812054801561286457600061279f600183612e3d565b85549091506000906127b390600190612e3d565b90508181146128185760008660000182815481106127d3576127d3612f1e565b90600052602060002001549050808760000184815481106127f6576127f6612f1e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061282957612829612f08565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610926565b6000915050610926565b612878813561288e565b612885816020013561288e565b610b2481604001355b64174876e8008111156128b45760405163c254ce4960e01b815260040160405180910390fd5b6128c4606464174876e800612dcb565b6128cf90601e612ddf565b811115610b245760405163b358944160e01b815260040160405180910390fd5b60008083601f84011261290157600080fd5b50813567ffffffffffffffff81111561291957600080fd5b60208301915083602082850101111561293157600080fd5b9250929050565b6000610120828403121561294b57600080fd5b50919050565b60006020828403121561296357600080fd5b813561121f81612f4a565b60006020828403121561298057600080fd5b815161121f81612f4a565b60008060008060008060008060c0898b0312156129a757600080fd5b88356129b281612f4a565b975060208901356129c281612f4a565b965060408901356129d281612f4a565b955060608901359450608089013567ffffffffffffffff808211156129f657600080fd5b612a028c838d016128ef565b909650945060a08b0135915080821115612a1b57600080fd5b50612a288b828c016128ef565b999c989b5096995094979396929594505050565b60008060408385031215612a4f57600080fd5b8235612a5a81612f4a565b946020939093013593505050565b600080600060608486031215612a7d57600080fd5b8335612a8881612f4a565b95602085013595506040909401359392505050565b600060208284031215612aaf57600080fd5b8151801515811461121f57600080fd5b600060208284031215612ad157600080fd5b5035919050565b60008060408385031215612aeb57600080fd5b823591506020830135612afd81612f4a565b809150509250929050565b60008060408385031215612b1b57600080fd5b50508035926020909101359150565b600060208284031215612b3c57600080fd5b81356001600160e01b03198116811461121f57600080fd5b6000806101408385031215612b6857600080fd5b8235612b7381612f4a565b9150612b828460208501612938565b90509250929050565b60006101208284031215612b9e57600080fd5b61121f8383612938565b600060208284031215612bba57600080fd5b5051919050565b60008151808452612bd9816020860160208601612e54565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c25816017850160208801612e54565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c56816028840160208801612e54565b01602801949350505050565b6001600160a01b039290921682526020820152608060408201819052600090820181905260a06060830181905282015260c00190565b602080825282518282018190526000919060409081850190868401855b82811015612ce257612cd284835180518252602090810151910152565b9284019290850190600101612cb5565b5091979650505050505050565b60208152600061121f6020830184612bc1565b606081526000612d156060830186612bc1565b60208301949094525060400152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600080821280156001600160ff1b0384900385131615612d9457612d94612ec6565b600160ff1b8390038412811615612dad57612dad612ec6565b50500190565b60008219821115612dc657612dc6612ec6565b500190565b600082612dda57612dda612edc565b500490565b6000816000190483118215151615612df957612df9612ec6565b500290565b60008083128015600160ff1b850184121615612e1c57612e1c612ec6565b6001600160ff1b0384018313811615612e3757612e37612ec6565b50500390565b600082821015612e4f57612e4f612ec6565b500390565b60005b83811015612e6f578181015183820152602001612e57565b838111156119465750506000910152565b600081612e8f57612e8f612ec6565b506000190190565b6000600019821415612eab57612eab612ec6565b5060010190565b600082612ec157612ec1612edc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b2457600080fdfe6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9ba264697066735822122001f36010eab576d79af70402aaa71e37ad4d13cc808400f4e124a82df8cc051364736f6c63430008070033",
}

// StakePoolABI is the input ABI used to generate the binding from.
// Deprecated: Use StakePoolMetaData.ABI instead.
var StakePoolABI = StakePoolMetaData.ABI

// StakePoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakePoolMetaData.Bin instead.
var StakePoolBin = StakePoolMetaData.Bin

// DeployStakePool deploys a new Ethereum contract, binding an instance of StakePool to it.
func DeployStakePool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakePool, error) {
	parsed, err := StakePoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakePoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakePool{StakePoolCaller: StakePoolCaller{contract: contract}, StakePoolTransactor: StakePoolTransactor{contract: contract}, StakePoolFilterer: StakePoolFilterer{contract: contract}}, nil
}

// StakePool is an auto generated Go binding around an Ethereum contract.
type StakePool struct {
	StakePoolCaller     // Read-only binding to the contract
	StakePoolTransactor // Write-only binding to the contract
	StakePoolFilterer   // Log filterer for contract events
}

// StakePoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakePoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakePoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakePoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakePoolSession struct {
	Contract     *StakePool        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakePoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakePoolCallerSession struct {
	Contract *StakePoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StakePoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakePoolTransactorSession struct {
	Contract     *StakePoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StakePoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakePoolRaw struct {
	Contract *StakePool // Generic contract binding to access the raw methods on
}

// StakePoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakePoolCallerRaw struct {
	Contract *StakePoolCaller // Generic read-only contract binding to access the raw methods on
}

// StakePoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakePoolTransactorRaw struct {
	Contract *StakePoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakePool creates a new instance of StakePool, bound to a specific deployed contract.
func NewStakePool(address common.Address, backend bind.ContractBackend) (*StakePool, error) {
	contract, err := bindStakePool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakePool{StakePoolCaller: StakePoolCaller{contract: contract}, StakePoolTransactor: StakePoolTransactor{contract: contract}, StakePoolFilterer: StakePoolFilterer{contract: contract}}, nil
}

// NewStakePoolCaller creates a new read-only instance of StakePool, bound to a specific deployed contract.
func NewStakePoolCaller(address common.Address, caller bind.ContractCaller) (*StakePoolCaller, error) {
	contract, err := bindStakePool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakePoolCaller{contract: contract}, nil
}

// NewStakePoolTransactor creates a new write-only instance of StakePool, bound to a specific deployed contract.
func NewStakePoolTransactor(address common.Address, transactor bind.ContractTransactor) (*StakePoolTransactor, error) {
	contract, err := bindStakePool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakePoolTransactor{contract: contract}, nil
}

// NewStakePoolFilterer creates a new log filterer instance of StakePool, bound to a specific deployed contract.
func NewStakePoolFilterer(address common.Address, filterer bind.ContractFilterer) (*StakePoolFilterer, error) {
	contract, err := bindStakePool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakePoolFilterer{contract: contract}, nil
}

// bindStakePool binds a generic wrapper to an already deployed contract.
func bindStakePool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakePoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakePool *StakePoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakePool.Contract.StakePoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakePool *StakePoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.Contract.StakePoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakePool *StakePoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakePool.Contract.StakePoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakePool *StakePoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakePool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakePool *StakePoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakePool *StakePoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakePool.Contract.contract.Transact(opts, method, params...)
}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCaller) BOTROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "BOT_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolSession) BOTROLE() ([32]byte, error) {
	return _StakePool.Contract.BOTROLE(&_StakePool.CallOpts)
}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCallerSession) BOTROLE() ([32]byte, error) {
	return _StakePool.Contract.BOTROLE(&_StakePool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _StakePool.Contract.DEFAULTADMINROLE(&_StakePool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _StakePool.Contract.DEFAULTADMINROLE(&_StakePool.CallOpts)
}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolCaller) AddressStore(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "addressStore")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolSession) AddressStore() (common.Address, error) {
	return _StakePool.Contract.AddressStore(&_StakePool.CallOpts)
}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolCallerSession) AddressStore() (common.Address, error) {
	return _StakePool.Contract.AddressStore(&_StakePool.CallOpts)
}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolCaller) BnbToUnbond(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "bnbToUnbond")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolSession) BnbToUnbond() (*big.Int, error) {
	return _StakePool.Contract.BnbToUnbond(&_StakePool.CallOpts)
}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolCallerSession) BnbToUnbond() (*big.Int, error) {
	return _StakePool.Contract.BnbToUnbond(&_StakePool.CallOpts)
}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolCaller) BnbUnbonding(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "bnbUnbonding")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolSession) BnbUnbonding() (*big.Int, error) {
	return _StakePool.Contract.BnbUnbonding(&_StakePool.CallOpts)
}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolCallerSession) BnbUnbonding() (*big.Int, error) {
	return _StakePool.Contract.BnbUnbonding(&_StakePool.CallOpts)
}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolCaller) ClaimReqs(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "claimReqs", arg0, arg1)

	outstruct := new(struct {
		WeiToReturn *big.Int
		CreatedAt   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.WeiToReturn = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.CreatedAt = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolSession) ClaimReqs(arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	return _StakePool.Contract.ClaimReqs(&_StakePool.CallOpts, arg0, arg1)
}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolCallerSession) ClaimReqs(arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	return _StakePool.Contract.ClaimReqs(&_StakePool.CallOpts, arg0, arg1)
}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolCaller) ClaimReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "claimReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolSession) ClaimReserve() (*big.Int, error) {
	return _StakePool.Contract.ClaimReserve(&_StakePool.CallOpts)
}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolCallerSession) ClaimReserve() (*big.Int, error) {
	return _StakePool.Contract.ClaimReserve(&_StakePool.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minCrossChainTransfer, uint256 transferOutTimeout, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolCaller) Config(opts *bind.CallOpts) (struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	TransferOutTimeout    *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		BcStakingWallet       common.Address
		MinCrossChainTransfer *big.Int
		TransferOutTimeout    *big.Int
		MinBNBDeposit         *big.Int
		MinTokenWithdrawal    *big.Int
		CooldownPeriod        *big.Int
		Fee                   FeeDistributionData
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BcStakingWallet = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.MinCrossChainTransfer = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TransferOutTimeout = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinBNBDeposit = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.MinTokenWithdrawal = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.CooldownPeriod = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Fee = *abi.ConvertType(out[6], new(FeeDistributionData)).(*FeeDistributionData)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minCrossChainTransfer, uint256 transferOutTimeout, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolSession) Config() (struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	TransferOutTimeout    *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}, error) {
	return _StakePool.Contract.Config(&_StakePool.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minCrossChainTransfer, uint256 transferOutTimeout, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolCallerSession) Config() (struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	TransferOutTimeout    *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}, error) {
	return _StakePool.Contract.Config(&_StakePool.CallOpts)
}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolCaller) ExchangeRate(opts *bind.CallOpts) (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "exchangeRate")

	outstruct := new(struct {
		TotalWei        *big.Int
		PoolTokenSupply *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalWei = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PoolTokenSupply = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolSession) ExchangeRate() (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	return _StakePool.Contract.ExchangeRate(&_StakePool.CallOpts)
}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolCallerSession) ExchangeRate() (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	return _StakePool.Contract.ExchangeRate(&_StakePool.CallOpts)
}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolCaller) GetClaimRequestCount(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getClaimRequestCount", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolSession) GetClaimRequestCount(user common.Address) (*big.Int, error) {
	return _StakePool.Contract.GetClaimRequestCount(&_StakePool.CallOpts, user)
}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetClaimRequestCount(user common.Address) (*big.Int, error) {
	return _StakePool.Contract.GetClaimRequestCount(&_StakePool.CallOpts, user)
}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolCaller) GetPaginatedClaimRequests(opts *bind.CallOpts, user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getPaginatedClaimRequests", user, from, to)

	if err != nil {
		return *new([]StakePoolClaimRequest), err
	}

	out0 := *abi.ConvertType(out[0], new([]StakePoolClaimRequest)).(*[]StakePoolClaimRequest)

	return out0, err

}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolSession) GetPaginatedClaimRequests(user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	return _StakePool.Contract.GetPaginatedClaimRequests(&_StakePool.CallOpts, user, from, to)
}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolCallerSession) GetPaginatedClaimRequests(user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	return _StakePool.Contract.GetPaginatedClaimRequests(&_StakePool.CallOpts, user, from, to)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _StakePool.Contract.GetRoleAdmin(&_StakePool.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _StakePool.Contract.GetRoleAdmin(&_StakePool.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _StakePool.Contract.GetRoleMember(&_StakePool.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _StakePool.Contract.GetRoleMember(&_StakePool.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _StakePool.Contract.GetRoleMemberCount(&_StakePool.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _StakePool.Contract.GetRoleMemberCount(&_StakePool.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _StakePool.Contract.HasRole(&_StakePool.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _StakePool.Contract.HasRole(&_StakePool.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolSession) Paused() (bool, error) {
	return _StakePool.Contract.Paused(&_StakePool.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolCallerSession) Paused() (bool, error) {
	return _StakePool.Contract.Paused(&_StakePool.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakePool.Contract.SupportsInterface(&_StakePool.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakePool.Contract.SupportsInterface(&_StakePool.CallOpts, interfaceId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolTransactor) Claim(opts *bind.TransactOpts, index *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "claim", index)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolSession) Claim(index *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.Claim(&_StakePool.TransactOpts, index)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolTransactorSession) Claim(index *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.Claim(&_StakePool.TransactOpts, index)
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolTransactor) ClaimAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "claimAll")
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolSession) ClaimAll() (*types.Transaction, error) {
	return _StakePool.Contract.ClaimAll(&_StakePool.TransactOpts)
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolTransactorSession) ClaimAll() (*types.Transaction, error) {
	return _StakePool.Contract.ClaimAll(&_StakePool.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolSession) Deposit() (*types.Transaction, error) {
	return _StakePool.Contract.Deposit(&_StakePool.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolTransactorSession) Deposit() (*types.Transaction, error) {
	return _StakePool.Contract.Deposit(&_StakePool.TransactOpts)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolTransactor) EpochUpdate(opts *bind.TransactOpts, bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "epochUpdate", bnbRewards)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolSession) EpochUpdate(bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.EpochUpdate(&_StakePool.TransactOpts, bnbRewards)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolTransactorSession) EpochUpdate(bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.EpochUpdate(&_StakePool.TransactOpts, bnbRewards)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.GrantRole(&_StakePool.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.GrantRole(&_StakePool.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x291532ed.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactor) Initialize(opts *bind.TransactOpts, addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "initialize", addressStore_, config_)
}

// Initialize is a paid mutator transaction binding the contract method 0x291532ed.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolSession) Initialize(addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.Initialize(&_StakePool.TransactOpts, addressStore_, config_)
}

// Initialize is a paid mutator transaction binding the contract method 0x291532ed.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactorSession) Initialize(addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.Initialize(&_StakePool.TransactOpts, addressStore_, config_)
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns()
func (_StakePool *StakePoolTransactor) InitiateDelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "initiateDelegation")
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns()
func (_StakePool *StakePoolSession) InitiateDelegation() (*types.Transaction, error) {
	return _StakePool.Contract.InitiateDelegation(&_StakePool.TransactOpts)
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns()
func (_StakePool *StakePoolTransactorSession) InitiateDelegation() (*types.Transaction, error) {
	return _StakePool.Contract.InitiateDelegation(&_StakePool.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolSession) Pause() (*types.Transaction, error) {
	return _StakePool.Contract.Pause(&_StakePool.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolTransactorSession) Pause() (*types.Transaction, error) {
	return _StakePool.Contract.Pause(&_StakePool.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RenounceRole(&_StakePool.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RenounceRole(&_StakePool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RevokeRole(&_StakePool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RevokeRole(&_StakePool.TransactOpts, role, account)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolTransactor) TokensReceived(opts *bind.TransactOpts, arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "tokensReceived", arg0, from, to, amount, arg4, arg5)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolSession) TokensReceived(arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.Contract.TokensReceived(&_StakePool.TransactOpts, arg0, from, to, amount, arg4, arg5)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolTransactorSession) TokensReceived(arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.Contract.TokensReceived(&_StakePool.TransactOpts, arg0, from, to, amount, arg4, arg5)
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolTransactor) UnbondingFinished(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unbondingFinished")
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolSession) UnbondingFinished() (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingFinished(&_StakePool.TransactOpts)
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolTransactorSession) UnbondingFinished() (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingFinished(&_StakePool.TransactOpts)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 bnbUnbonding_) returns()
func (_StakePool *StakePoolTransactor) UnbondingInitiated(opts *bind.TransactOpts, bnbUnbonding_ *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unbondingInitiated", bnbUnbonding_)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 bnbUnbonding_) returns()
func (_StakePool *StakePoolSession) UnbondingInitiated(bnbUnbonding_ *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingInitiated(&_StakePool.TransactOpts, bnbUnbonding_)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 bnbUnbonding_) returns()
func (_StakePool *StakePoolTransactorSession) UnbondingInitiated(bnbUnbonding_ *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingInitiated(&_StakePool.TransactOpts, bnbUnbonding_)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolSession) Unpause() (*types.Transaction, error) {
	return _StakePool.Contract.Unpause(&_StakePool.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolTransactorSession) Unpause() (*types.Transaction, error) {
	return _StakePool.Contract.Unpause(&_StakePool.TransactOpts)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x8d0f4bd9.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactor) UpdateConfig(opts *bind.TransactOpts, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "updateConfig", config_)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x8d0f4bd9.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolSession) UpdateConfig(config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.UpdateConfig(&_StakePool.TransactOpts, config_)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x8d0f4bd9.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactorSession) UpdateConfig(config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.UpdateConfig(&_StakePool.TransactOpts, config_)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakePool *StakePoolTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakePool *StakePoolSession) Receive() (*types.Transaction, error) {
	return _StakePool.Contract.Receive(&_StakePool.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakePool *StakePoolTransactorSession) Receive() (*types.Transaction, error) {
	return _StakePool.Contract.Receive(&_StakePool.TransactOpts)
}

// StakePoolClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the StakePool contract.
type StakePoolClaimIterator struct {
	Event *StakePoolClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolClaim represents a Claim event raised by the StakePool contract.
type StakePoolClaim struct {
	User      common.Address
	Req       StakePoolClaimRequest
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterClaim(opts *bind.FilterOpts, user []common.Address) (*StakePoolClaimIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Claim", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolClaimIterator{contract: _StakePool.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *StakePoolClaim, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Claim", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolClaim)
				if err := _StakePool.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseClaim(log types.Log) (*StakePoolClaim, error) {
	event := new(StakePoolClaim)
	if err := _StakePool.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolConfigUpdatedIterator is returned from FilterConfigUpdated and is used to iterate over the raw logs and unpacked data for ConfigUpdated events raised by the StakePool contract.
type StakePoolConfigUpdatedIterator struct {
	Event *StakePoolConfigUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolConfigUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolConfigUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolConfigUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolConfigUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolConfigUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolConfigUpdated represents a ConfigUpdated event raised by the StakePool contract.
type StakePoolConfigUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterConfigUpdated is a free log retrieval operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) FilterConfigUpdated(opts *bind.FilterOpts) (*StakePoolConfigUpdatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "ConfigUpdated")
	if err != nil {
		return nil, err
	}
	return &StakePoolConfigUpdatedIterator{contract: _StakePool.contract, event: "ConfigUpdated", logs: logs, sub: sub}, nil
}

// WatchConfigUpdated is a free log subscription operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) WatchConfigUpdated(opts *bind.WatchOpts, sink chan<- *StakePoolConfigUpdated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "ConfigUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolConfigUpdated)
				if err := _StakePool.contract.UnpackLog(event, "ConfigUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigUpdated is a log parse operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) ParseConfigUpdated(log types.Log) (*StakePoolConfigUpdated, error) {
	event := new(StakePoolConfigUpdated)
	if err := _StakePool.contract.UnpackLog(event, "ConfigUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the StakePool contract.
type StakePoolDepositIterator struct {
	Event *StakePoolDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolDeposit represents a Deposit event raised by the StakePool contract.
type StakePoolDeposit struct {
	User            common.Address
	BnbAmount       *big.Int
	PoolTokenAmount *big.Int
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address) (*StakePoolDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolDepositIterator{contract: _StakePool.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StakePoolDeposit, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolDeposit)
				if err := _StakePool.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseDeposit(log types.Log) (*StakePoolDeposit, error) {
	event := new(StakePoolDeposit)
	if err := _StakePool.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolEpochUpdateIterator is returned from FilterEpochUpdate and is used to iterate over the raw logs and unpacked data for EpochUpdate events raised by the StakePool contract.
type StakePoolEpochUpdateIterator struct {
	Event *StakePoolEpochUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolEpochUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolEpochUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolEpochUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolEpochUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolEpochUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolEpochUpdate represents a EpochUpdate event raised by the StakePool contract.
type StakePoolEpochUpdate struct {
	BnbRewards *big.Int
	FeeTokens  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEpochUpdate is a free log retrieval operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) FilterEpochUpdate(opts *bind.FilterOpts) (*StakePoolEpochUpdateIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "EpochUpdate")
	if err != nil {
		return nil, err
	}
	return &StakePoolEpochUpdateIterator{contract: _StakePool.contract, event: "EpochUpdate", logs: logs, sub: sub}, nil
}

// WatchEpochUpdate is a free log subscription operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) WatchEpochUpdate(opts *bind.WatchOpts, sink chan<- *StakePoolEpochUpdate) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "EpochUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolEpochUpdate)
				if err := _StakePool.contract.UnpackLog(event, "EpochUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochUpdate is a log parse operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) ParseEpochUpdate(log types.Log) (*StakePoolEpochUpdate, error) {
	event := new(StakePoolEpochUpdate)
	if err := _StakePool.contract.UnpackLog(event, "EpochUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StakePool contract.
type StakePoolInitializedIterator struct {
	Event *StakePoolInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitialized represents a Initialized event raised by the StakePool contract.
type StakePoolInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakePoolInitializedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitializedIterator{contract: _StakePool.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakePoolInitialized) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitialized)
				if err := _StakePool.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) ParseInitialized(log types.Log) (*StakePoolInitialized, error) {
	event := new(StakePoolInitialized)
	if err := _StakePool.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitiateDelegationShortCircuitIterator is returned from FilterInitiateDelegationShortCircuit and is used to iterate over the raw logs and unpacked data for InitiateDelegationShortCircuit events raised by the StakePool contract.
type StakePoolInitiateDelegationShortCircuitIterator struct {
	Event *StakePoolInitiateDelegationShortCircuit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitiateDelegationShortCircuitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitiateDelegationShortCircuit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitiateDelegationShortCircuit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitiateDelegationShortCircuitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitiateDelegationShortCircuitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitiateDelegationShortCircuit represents a InitiateDelegationShortCircuit event raised by the StakePool contract.
type StakePoolInitiateDelegationShortCircuit struct {
	ShortCircuitAmount *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterInitiateDelegationShortCircuit is a free log retrieval operation binding the contract event 0x398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd1.
//
// Solidity: event InitiateDelegation_ShortCircuit(uint256 shortCircuitAmount)
func (_StakePool *StakePoolFilterer) FilterInitiateDelegationShortCircuit(opts *bind.FilterOpts) (*StakePoolInitiateDelegationShortCircuitIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "InitiateDelegation_ShortCircuit")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitiateDelegationShortCircuitIterator{contract: _StakePool.contract, event: "InitiateDelegation_ShortCircuit", logs: logs, sub: sub}, nil
}

// WatchInitiateDelegationShortCircuit is a free log subscription operation binding the contract event 0x398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd1.
//
// Solidity: event InitiateDelegation_ShortCircuit(uint256 shortCircuitAmount)
func (_StakePool *StakePoolFilterer) WatchInitiateDelegationShortCircuit(opts *bind.WatchOpts, sink chan<- *StakePoolInitiateDelegationShortCircuit) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "InitiateDelegation_ShortCircuit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitiateDelegationShortCircuit)
				if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_ShortCircuit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateDelegationShortCircuit is a log parse operation binding the contract event 0x398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd1.
//
// Solidity: event InitiateDelegation_ShortCircuit(uint256 shortCircuitAmount)
func (_StakePool *StakePoolFilterer) ParseInitiateDelegationShortCircuit(log types.Log) (*StakePoolInitiateDelegationShortCircuit, error) {
	event := new(StakePoolInitiateDelegationShortCircuit)
	if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_ShortCircuit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitiateDelegationSuccessIterator is returned from FilterInitiateDelegationSuccess and is used to iterate over the raw logs and unpacked data for InitiateDelegationSuccess events raised by the StakePool contract.
type StakePoolInitiateDelegationSuccessIterator struct {
	Event *StakePoolInitiateDelegationSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitiateDelegationSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitiateDelegationSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitiateDelegationSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitiateDelegationSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitiateDelegationSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitiateDelegationSuccess represents a InitiateDelegationSuccess event raised by the StakePool contract.
type StakePoolInitiateDelegationSuccess struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterInitiateDelegationSuccess is a free log retrieval operation binding the contract event 0xab39d195fb15cf2b785ee487c131ff8eb2b3c97d2750756b63e3b11e81a11cfb.
//
// Solidity: event InitiateDelegation_Success()
func (_StakePool *StakePoolFilterer) FilterInitiateDelegationSuccess(opts *bind.FilterOpts) (*StakePoolInitiateDelegationSuccessIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "InitiateDelegation_Success")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitiateDelegationSuccessIterator{contract: _StakePool.contract, event: "InitiateDelegation_Success", logs: logs, sub: sub}, nil
}

// WatchInitiateDelegationSuccess is a free log subscription operation binding the contract event 0xab39d195fb15cf2b785ee487c131ff8eb2b3c97d2750756b63e3b11e81a11cfb.
//
// Solidity: event InitiateDelegation_Success()
func (_StakePool *StakePoolFilterer) WatchInitiateDelegationSuccess(opts *bind.WatchOpts, sink chan<- *StakePoolInitiateDelegationSuccess) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "InitiateDelegation_Success")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitiateDelegationSuccess)
				if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_Success", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateDelegationSuccess is a log parse operation binding the contract event 0xab39d195fb15cf2b785ee487c131ff8eb2b3c97d2750756b63e3b11e81a11cfb.
//
// Solidity: event InitiateDelegation_Success()
func (_StakePool *StakePoolFilterer) ParseInitiateDelegationSuccess(log types.Log) (*StakePoolInitiateDelegationSuccess, error) {
	event := new(StakePoolInitiateDelegationSuccess)
	if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_Success", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitiateDelegationTransferOutIterator is returned from FilterInitiateDelegationTransferOut and is used to iterate over the raw logs and unpacked data for InitiateDelegationTransferOut events raised by the StakePool contract.
type StakePoolInitiateDelegationTransferOutIterator struct {
	Event *StakePoolInitiateDelegationTransferOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitiateDelegationTransferOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitiateDelegationTransferOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitiateDelegationTransferOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitiateDelegationTransferOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitiateDelegationTransferOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitiateDelegationTransferOut represents a InitiateDelegationTransferOut event raised by the StakePool contract.
type StakePoolInitiateDelegationTransferOut struct {
	TransferOutAmount *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterInitiateDelegationTransferOut is a free log retrieval operation binding the contract event 0x12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa.
//
// Solidity: event InitiateDelegation_TransferOut(uint256 transferOutAmount)
func (_StakePool *StakePoolFilterer) FilterInitiateDelegationTransferOut(opts *bind.FilterOpts) (*StakePoolInitiateDelegationTransferOutIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "InitiateDelegation_TransferOut")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitiateDelegationTransferOutIterator{contract: _StakePool.contract, event: "InitiateDelegation_TransferOut", logs: logs, sub: sub}, nil
}

// WatchInitiateDelegationTransferOut is a free log subscription operation binding the contract event 0x12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa.
//
// Solidity: event InitiateDelegation_TransferOut(uint256 transferOutAmount)
func (_StakePool *StakePoolFilterer) WatchInitiateDelegationTransferOut(opts *bind.WatchOpts, sink chan<- *StakePoolInitiateDelegationTransferOut) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "InitiateDelegation_TransferOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitiateDelegationTransferOut)
				if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_TransferOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateDelegationTransferOut is a log parse operation binding the contract event 0x12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa.
//
// Solidity: event InitiateDelegation_TransferOut(uint256 transferOutAmount)
func (_StakePool *StakePoolFilterer) ParseInitiateDelegationTransferOut(log types.Log) (*StakePoolInitiateDelegationTransferOut, error) {
	event := new(StakePoolInitiateDelegationTransferOut)
	if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_TransferOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the StakePool contract.
type StakePoolPausedIterator struct {
	Event *StakePoolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolPaused represents a Paused event raised by the StakePool contract.
type StakePoolPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) FilterPaused(opts *bind.FilterOpts) (*StakePoolPausedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StakePoolPausedIterator{contract: _StakePool.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StakePoolPaused) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolPaused)
				if err := _StakePool.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) ParsePaused(log types.Log) (*StakePoolPaused, error) {
	event := new(StakePoolPaused)
	if err := _StakePool.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the StakePool contract.
type StakePoolRoleAdminChangedIterator struct {
	Event *StakePoolRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleAdminChanged represents a RoleAdminChanged event raised by the StakePool contract.
type StakePoolRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*StakePoolRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleAdminChangedIterator{contract: _StakePool.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *StakePoolRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleAdminChanged)
				if err := _StakePool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) ParseRoleAdminChanged(log types.Log) (*StakePoolRoleAdminChanged, error) {
	event := new(StakePoolRoleAdminChanged)
	if err := _StakePool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the StakePool contract.
type StakePoolRoleGrantedIterator struct {
	Event *StakePoolRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleGranted represents a RoleGranted event raised by the StakePool contract.
type StakePoolRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*StakePoolRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleGrantedIterator{contract: _StakePool.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *StakePoolRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleGranted)
				if err := _StakePool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) ParseRoleGranted(log types.Log) (*StakePoolRoleGranted, error) {
	event := new(StakePoolRoleGranted)
	if err := _StakePool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the StakePool contract.
type StakePoolRoleRevokedIterator struct {
	Event *StakePoolRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleRevoked represents a RoleRevoked event raised by the StakePool contract.
type StakePoolRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*StakePoolRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleRevokedIterator{contract: _StakePool.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *StakePoolRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleRevoked)
				if err := _StakePool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) ParseRoleRevoked(log types.Log) (*StakePoolRoleRevoked, error) {
	event := new(StakePoolRoleRevoked)
	if err := _StakePool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnbondingFinishedIterator is returned from FilterUnbondingFinished and is used to iterate over the raw logs and unpacked data for UnbondingFinished events raised by the StakePool contract.
type StakePoolUnbondingFinishedIterator struct {
	Event *StakePoolUnbondingFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnbondingFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnbondingFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnbondingFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnbondingFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnbondingFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnbondingFinished represents a UnbondingFinished event raised by the StakePool contract.
type StakePoolUnbondingFinished struct {
	UnbondedAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnbondingFinished is a free log retrieval operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) FilterUnbondingFinished(opts *bind.FilterOpts) (*StakePoolUnbondingFinishedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "UnbondingFinished")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnbondingFinishedIterator{contract: _StakePool.contract, event: "UnbondingFinished", logs: logs, sub: sub}, nil
}

// WatchUnbondingFinished is a free log subscription operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) WatchUnbondingFinished(opts *bind.WatchOpts, sink chan<- *StakePoolUnbondingFinished) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "UnbondingFinished")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnbondingFinished)
				if err := _StakePool.contract.UnpackLog(event, "UnbondingFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingFinished is a log parse operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) ParseUnbondingFinished(log types.Log) (*StakePoolUnbondingFinished, error) {
	event := new(StakePoolUnbondingFinished)
	if err := _StakePool.contract.UnpackLog(event, "UnbondingFinished", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnbondingInitiatedIterator is returned from FilterUnbondingInitiated and is used to iterate over the raw logs and unpacked data for UnbondingInitiated events raised by the StakePool contract.
type StakePoolUnbondingInitiatedIterator struct {
	Event *StakePoolUnbondingInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnbondingInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnbondingInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnbondingInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnbondingInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnbondingInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnbondingInitiated represents a UnbondingInitiated event raised by the StakePool contract.
type StakePoolUnbondingInitiated struct {
	BnbUnbonding *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUnbondingInitiated is a free log retrieval operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) FilterUnbondingInitiated(opts *bind.FilterOpts) (*StakePoolUnbondingInitiatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "UnbondingInitiated")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnbondingInitiatedIterator{contract: _StakePool.contract, event: "UnbondingInitiated", logs: logs, sub: sub}, nil
}

// WatchUnbondingInitiated is a free log subscription operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) WatchUnbondingInitiated(opts *bind.WatchOpts, sink chan<- *StakePoolUnbondingInitiated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "UnbondingInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnbondingInitiated)
				if err := _StakePool.contract.UnpackLog(event, "UnbondingInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingInitiated is a log parse operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) ParseUnbondingInitiated(log types.Log) (*StakePoolUnbondingInitiated, error) {
	event := new(StakePoolUnbondingInitiated)
	if err := _StakePool.contract.UnpackLog(event, "UnbondingInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the StakePool contract.
type StakePoolUnpausedIterator struct {
	Event *StakePoolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnpaused represents a Unpaused event raised by the StakePool contract.
type StakePoolUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*StakePoolUnpausedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnpausedIterator{contract: _StakePool.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StakePoolUnpaused) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnpaused)
				if err := _StakePool.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) ParseUnpaused(log types.Log) (*StakePoolUnpaused, error) {
	event := new(StakePoolUnpaused)
	if err := _StakePool.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the StakePool contract.
type StakePoolWithdrawIterator struct {
	Event *StakePoolWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolWithdraw represents a Withdraw event raised by the StakePool contract.
type StakePoolWithdraw struct {
	User            common.Address
	PoolTokenAmount *big.Int
	BnbAmount       *big.Int
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterWithdraw(opts *bind.FilterOpts, user []common.Address) (*StakePoolWithdrawIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Withdraw", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolWithdrawIterator{contract: _StakePool.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StakePoolWithdraw, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Withdraw", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolWithdraw)
				if err := _StakePool.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseWithdraw(log types.Log) (*StakePoolWithdraw, error) {
	event := new(StakePoolWithdraw)
	if err := _StakePool.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
