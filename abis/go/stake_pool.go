// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}

// FeeDistributionData is an auto generated low-level Go binding around an user-defined struct.
type FeeDistributionData struct {
	Reward   *big.Int
	Deposit  *big.Int
	Withdraw *big.Int
}

// StakePoolClaimRequest is an auto generated low-level Go binding around an user-defined struct.
type StakePoolClaimRequest struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}

// StakePoolMetaData contains all meta data concerning the StakePool contract.
var StakePoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CantClaimBeforeDeadline\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"DustNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFundsToSatisfyClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"}],\"name\":\"LessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinCrossChainTransferMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumeratorMoreThanBasis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausablePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ToIndexMustBeGreaterThanFromIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMintingToSelfNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferToSelfNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnexpectedlyReceivedTokensForSomeoneElse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structStakePool.ClaimRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"}],\"name\":\"EpochUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortCircuitAmount\",\"type\":\"uint256\"}],\"name\":\"InitiateDelegation_ShortCircuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferOutAmount\",\"type\":\"uint256\"}],\"name\":\"InitiateDelegation_TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unbondedAmount\",\"type\":\"uint256\"}],\"name\":\"UnbondingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbUnbonding\",\"type\":\"uint256\"}],\"name\":\"UnbondingInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressStore\",\"outputs\":[{\"internalType\":\"contractIAddressStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbToUnbond\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimReqs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrossChainTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"}],\"name\":\"epochUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getPaginatedClaimRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"structStakePool.ClaimRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAddressStore\",\"name\":\"addressStore_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrossChainTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"structConfig.Data\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondingFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbUnbonding_\",\"type\":\"uint256\"}],\"name\":\"unbondingInitiated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCrossChainTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"structConfig.Data\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612d6080620000f46000396000f3fe6080604052600436106101e65760003560e01c806379502c5511610102578063b150377411610095578063d1058e5911610064578063d1058e59146106c4578063d547741f146106d9578063f773d87d146106f9578063fa6c2f7d1461071957600080fd5b8063b15037741461065a578063c773c8f71461067c578063ca15c8731461069c578063d0e30db0146106bc57600080fd5b80639010d07c116100d15780639010d07c146105cd57806391d14854146106055780639c0cced114610625578063a217fddf1461064557600080fd5b806379502c55146104c25780638456cb59146105625780638b2bf29f146105775780638be780831461059757600080fd5b80633f4ba83a1161017a5780635d97914c116101495780635d97914c1461044b5780636eb959401461046057806372bd5c941461047557806375ccc37a1461049557600080fd5b80633f4ba83a146103f45780633fe5f0541461040957806354cc6d9d1461041e5780635c975abb1461043357600080fd5b80632ff761d8116101b65780632ff761d81461036457806336568abe14610384578063379607f5146103a45780633ba0b9a9146103c457600080fd5b806223de29146102b157806301ffc9a7146102d1578063248a9ca3146103065780632f2ff15d1461034457600080fd5b366102ac576101f361072e565b60c960009054906101000a90046001600160a01b03166001600160a01b03166388d1161d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024157600080fd5b505afa158015610255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102799190612719565b6001600160a01b0316336001600160a01b0316146102aa5760405163399a77fd60e01b815260040160405180910390fd5b005b600080fd5b3480156102bd57600080fd5b506102aa6102cc366004612736565b610754565b3480156102dd57600080fd5b506102f16102ec3660046128d5565b6108f6565b60405190151581526020015b60405180910390f35b34801561031257600080fd5b5061033661032136600461286a565b60009081526065602052604090206001015490565b6040519081526020016102fd565b34801561035057600080fd5b506102aa61035f366004612883565b610921565b34801561037057600080fd5b506102aa61037f3660046128ff565b61094b565b34801561039057600080fd5b506102aa61039f366004612883565b610a5f565b3480156103b057600080fd5b506102aa6103bf36600461286a565b610add565b3480156103d057600080fd5b5060d75460d8546103df919082565b604080519283526020830191909152016102fd565b34801561040057600080fd5b506102aa610b20565b34801561041557600080fd5b5060d654610336565b34801561042a57600080fd5b506102aa610b74565b34801561043f57600080fd5b5060d25460ff166102f1565b34801561045757600080fd5b5060d454610336565b34801561046c57600080fd5b5060d554610336565b34801561048157600080fd5b506102aa61049036600461286a565b610ced565b3480156104a157600080fd5b506104b56104b0366004612813565b610f2c565b6040516102fd9190612a43565b3480156104ce57600080fd5b5060ca5460cb5460cc5460cd5460ce546040805160608101825260cf54815260d054602082015260d15491810191909152610514956001600160a01b0316949392919086565b604080516001600160a01b0390971687526020808801969096528681019490945260608601929092526080850152805160a08501529182015160c0840152015160e0820152610100016102fd565b34801561056e57600080fd5b506102aa6110e8565b34801561058357600080fd5b506102aa61059236600461286a565b611138565b3480156105a357600080fd5b506103366105b23660046126fc565b6001600160a01b0316600090815260d9602052604090205490565b3480156105d957600080fd5b506105ed6105e83660046128b3565b6111b8565b6040516001600160a01b0390911681526020016102fd565b34801561061157600080fd5b506102f1610620366004612883565b6111d7565b34801561063157600080fd5b506102aa610640366004612936565b611202565b34801561065157600080fd5b50610336600081565b34801561066657600080fd5b50610336600080516020612d0b83398151915281565b34801561068857600080fd5b5060c9546105ed906001600160a01b031681565b3480156106a857600080fd5b506103366106b736600461286a565b611245565b6102aa61125c565b3480156106d057600080fd5b506102aa611518565b3480156106e557600080fd5b506102aa6106f4366004612883565b611580565b34801561070557600080fd5b506103df6107143660046127e7565b6115a5565b34801561072557600080fd5b506102aa6115e1565b60d25460ff16156107525760405163928dfa7760e01b815260040160405180910390fd5b565b61075c61072e565b61076461182b565b60408051808201909152600a81526915da5d1a191c985dd85b60b21b602082015260cd5486610794838383611856565b60c960009054906101000a90046001600160a01b03166001600160a01b031663e016dedc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190612719565b6001600160a01b0316336001600160a01b03161461084b5760405163399a77fd60e01b815260040160405180910390fd5b6001600160a01b038a166108725760405163eb577da760e01b815260040160405180910390fd5b6001600160a01b038a1630141561089c576040516315bddb7b60e01b815260040160405180910390fd5b6001600160a01b03891630146108d5576040516338a5c37560e01b81526001600160a01b038a1660048201526024015b60405180910390fd5b6108df8a896118b3565b5050506108ec600160d355565b5050505050505050565b60006001600160e01b03198216635a05180f60e01b148061091b575061091b82611bb6565b92915050565b60008281526065602052604090206001015461093c81611beb565b6109468383611bf5565b505050565b600054610100900460ff161580801561096b5750600054600160ff909116105b806109855750303b158015610985575060005460ff166001145b6109e85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108cc565b6000805460ff191660011790558015610a0b576000805461ff0019166101001790555b610a158383611c17565b8015610946576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6001600160a01b0381163314610acf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108cc565b610ad98282611c48565b5050565b610ae561072e565b610aed61182b565b610af681611c6a565b610b1357604051637e868a7360e01b815260040160405180910390fd5b610b1d600160d355565b50565b6000610b2b81611beb565b610b33611e89565b60d2805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b610b7c61072e565b600080516020612d0b833981519152610b9481611beb565b60c954604080516388d1161d60e01b815290516000926001600160a01b0316916388d1161d916004808301926020929190829003018186803b158015610bd957600080fd5b505afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190612719565b6001600160a01b03166347066d026040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c839190612953565b90508060d56000828254610c979190612be8565b925050819055508060d66000828254610cb09190612b5e565b90915550506040518181527f31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5906020015b60405180910390a15050565b610cf561072e565b600080516020612d0b833981519152610d0d81611beb565b60cf54600090610d1d9084611eab565b90506000818460d760000154610d339190612b5e565b610d3d9190612be8565b60d854610d4a9084612b8a565b610d549190612b76565b9050610d81604051806040016040528086815260200183815250600060d7611ec79092919063ffffffff16565b60c960009054906101000a90046001600160a01b03166001600160a01b031663e016dedc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcf57600080fd5b505afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190612719565b6001600160a01b031663dcdc7dd060c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612719565b836040518363ffffffff1660e01b8152600401610eb9929190612a0d565b600060405180830381600087803b158015610ed357600080fd5b505af1158015610ee7573d6000803e3d6000fd5b505060408051878152602081018590527fcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb193500190505b60405180910390a150505050565b6001600160a01b038316600090815260d960205260409020546060908310610f6a5760405163112517f360e21b8152600481018490526024016108cc565b818310610f9457604051630dfc263960e01b815260048101849052602481018390526044016108cc565b6001600160a01b038416600090815260d96020526040902054821115610fd0576001600160a01b038416600090815260d9602052604090205491505b6000610fdc8484612be8565b67ffffffffffffffff811115610ff457610ff4612cdf565b60405190808252806020026020018201604052801561103957816020015b60408051808201909152600080825260208201528152602001906001900390816110125790505b50905060005b6110498585612be8565b8110156110df576001600160a01b038616600090815260d9602052604090206110728287612b5e565b8154811061108257611082612cc9565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508282815181106110c1576110c1612cc9565b602002602001018190525080806110d790612c42565b91505061103f565b50949350505050565b60006110f381611beb565b6110fb61072e565b60d2805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610b69565b61114061072e565b600080516020612d0b83398151915261115881611beb565b8160d4600082825461116a9190612ba9565b925050819055508160d560008282546111839190612b5e565b90915550506040518281527ffcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba8790602001610ce1565b60008281526097602052604081206111d09083611f5a565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061120d81611beb565b61121860ca83611f66565b6040517ffe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d190600090a15050565b600081815260976020526040812061091b90611f79565b61126461072e565b61126c61182b565b60408051808201909152600781526611195c1bdcda5d60ca1b602082015260cc5434611299838383611856565b3460006112a760d783611f83565b60d0549091506000906112ba9083611eab565b905060006112c88284612be8565b90506112f5604051806040016040528086815260200185815250600060d7611ec79092919063ffffffff16565b60c95460408051633805b7b760e21b815290516000926001600160a01b03169163e016dedc916004808301926020929190829003018186803b15801561133a57600080fd5b505afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190612719565b604051630dcdc7dd60e41b81529091506001600160a01b0382169063dcdc7dd0906113a39033908690600401612a0d565b600060405180830381600087803b1580156113bd57600080fd5b505af11580156113d1573d6000803e3d6000fd5b5050505060008311156114c457806001600160a01b031663dcdc7dd060c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114739190612719565b856040518363ffffffff1660e01b8152600401611491929190612a0d565b600060405180830381600087803b1580156114ab57600080fd5b505af11580156114bf573d6000803e3d6000fd5b505050505b60408051348152602081018490524281830152905133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e919081900360600190a25050505050505050610752600160d355565b61152061072e565b61152861182b565b33600090815260d96020526040812054905b818110156115745761154b81611c6a565b15611562578161155a81612c2b565b92505061153a565b8061156c81612c42565b91505061153a565b5050610752600160d355565b60008281526065602052604090206001015461159b81611beb565b6109468383611c48565b60d960205281600052604060002081815481106115c157600080fd5b600091825260209091206002909102018054600190910154909250905082565b6115e961072e565b600080516020612d0b83398151915261160181611beb565b600060d654476116119190612be8565b905060006110046001600160a01b031663149d14d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561165057600080fd5b505afa158015611664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116889190612953565b60cb549091506116989082612b5e565b821061179c5760006116aa8284612be8565b60ca549091506110049063aa7415f59085906000906001600160a01b0316856116d542610e10612b5e565b6040516001600160e01b031960e088901b1681526001600160a01b039485166004820152939092166024840152604483015267ffffffffffffffff1660648201526084016020604051808303818588803b15801561173257600080fd5b505af1158015611746573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061176b9190612848565b506040518181527f12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa90602001610f1e565b6000821180156117ae5750600060d454135b156109465760008260d45413156117c65750816117cb565b5060d4545b8060d460008282546117dd9190612ba9565b925050819055508060d660008282546117f69190612b5e565b90915550506040518181527f398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd190602001610f1e565b600260d354141561184f57604051633ee5aeb560e01b815260040160405180910390fd5b600260d355565b8181101561187d57828282604051631a14281160e01b81526004016108cc93929190612aad565b60006118898383612c5d565b905080156118ad57604051634301c31b60e01b8152600481018290526024016108cc565b50505050565b60d1546000906118c39083611eab565b905060006118d18284612be8565b905060006118e060d783611fb3565b6001600160a01b038616600090815260d96020908152604080832081518083019092528482524282840190815281546001818101845592865293852092516002909402909201928355905191015560d480549293508392909190611945908490612b1d565b9091555050604080518082019091528181526020810183905261196c9060d7906001611ec7565b60c95460408051633805b7b760e21b815290516000926001600160a01b03169163e016dedc916004808301926020929190829003018186803b1580156119b157600080fd5b505afa1580156119c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e99190612719565b6040805163fe9d930360e01b8152600481018690526024810191909152600060448201529091506001600160a01b0382169063fe9d930390606401600060405180830381600087803b158015611a3e57600080fd5b505af1158015611a52573d6000803e3d6000fd5b505050506000841115611b6357806001600160a01b0316639bd9bbc660c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b158015611abc57600080fd5b505afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af49190612719565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526060604482015260006064820152608401600060405180830381600087803b158015611b4a57600080fd5b505af1158015611b5e573d6000803e3d6000fd5b505050505b6040805186815260208101849052428183015290516001600160a01b038816917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94919081900360600190a2505050505050565b60006001600160e01b03198216637965db0b60e01b148061091b57506301ffc9a760e01b6001600160e01b031983161461091b565b610b1d8133611ffb565b611bff828261205f565b600082815260976020526040902061094690826120e5565b600054610100900460ff16611c3e5760405162461bcd60e51b81526004016108cc90612ad2565b610ad982826120fa565b611c528282612211565b60008281526097602052604090206109469082612278565b33600090815260d960205260408120548210611c9c5760405163112517f360e21b8152600481018390526024016108cc565b33600090815260d960205260408120805484908110611cbd57611cbd612cc9565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050611cf58161228d565b611d025750600092915050565b8051471015611d245760405163e723ea5960e01b815260040160405180910390fd5b805160d68054600090611d38908490612be8565b909155505033600090815260d9602052604090208054611d5a90600190612be8565b81548110611d6a57611d6a612cc9565b906000526020600020906002020160d96000336001600160a01b03166001600160a01b031681526020019081526020016000208481548110611dae57611dae612cc9565b600091825260208083208454600290930201918255600193840154939091019290925533815260d990915260409020805480611dec57611dec612cb3565b60008281526020812060026000199093019283020181815560010181905591558151604051339282156108fc02929190818181858888f19350505050158015611e39573d6000803e3d6000fd5b506040805182518152602080840151908201524281830152905133917f68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6919081900360600190a250600192915050565b60d25460ff166107525760405162c5619760e61b815260040160405180910390fd5b600064174876e800611ebd8484612b8a565b6111d09190612b76565b6000816001811115611edb57611edb612c9d565b1415611f1e57815183548490600090611ef5908490612b5e565b90915550506020820151600184018054600090611f13908490612b5e565b909155506109469050565b815183548490600090611f32908490612be8565b90915550506020820151600184018054600090611f50908490612be8565b9091555050505050565b60006111d083836122a9565b611f6f816122d3565b610ad98282612301565b600061091b825490565b81546000901580611f9657506001830154155b15611fa257508061091b565b82546001840154611ebd9084612b8a565b81546000908190611fc49084612b8a565b600185015490915080821080611fd8575080155b15611fe85760009250505061091b565b611ff28183612b76565b95945050505050565b61200582826111d7565b610ad95761201d816001600160a01b03166014612376565b612028836020612376565b604051602001612039929190612998565b60408051601f198184030181529082905262461bcd60e51b82526108cc91600401612a9a565b61206982826111d7565b610ad95760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120a13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006111d0836001600160a01b038416612512565b600054610100900460ff166121215760405162461bcd60e51b81526004016108cc90612ad2565b60c980546001600160a01b0319166001600160a01b03841617905561214760ca82611f66565b60d2805460ff1916600190811790915560d355600060d481905560d581905560d681905560d781905560d8556040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156121ec57600080fd5b505af1158015612200573d6000803e3d6000fd5b50505050610ad96000801b33611bf5565b61221b82826111d7565b15610ad95760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006111d0836001600160a01b038416612561565b60ce5460208201516000916122a191612b5e565b421192915050565b60008260000182815481106122c0576122c0612cc9565b9060005260206000200154905092915050565b6122df8160a001612654565b6020810135610b1d57604051630334eb0560e51b815260040160405180910390fd5b61230e60208201826126fc565b82546001600160a01b0319166001600160a01b039190911617825560208101356001830155604081013560028301556060810135600383015560808101356004830155610ad96005830160a08301803582556020810135600183015560400135600290910155565b60606000612385836002612b8a565b612390906002612b5e565b67ffffffffffffffff8111156123a8576123a8612cdf565b6040519080825280601f01601f1916602001820160405280156123d2576020820181803683370190505b509050600360fc1b816000815181106123ed576123ed612cc9565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061241c5761241c612cc9565b60200101906001600160f81b031916908160001a9053506000612440846002612b8a565b61244b906001612b5e565b90505b60018111156124c3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061247f5761247f612cc9565b1a60f81b82828151811061249557612495612cc9565b60200101906001600160f81b031916908160001a90535060049490941c936124bc81612c2b565b905061244e565b5083156111d05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108cc565b60008181526001830160205260408120546125595750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561091b565b50600061091b565b6000818152600183016020526040812054801561264a576000612585600183612be8565b855490915060009061259990600190612be8565b90508181146125fe5760008660000182815481106125b9576125b9612cc9565b90600052602060002001549050808760000184815481106125dc576125dc612cc9565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061260f5761260f612cb3565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061091b565b600091505061091b565b61265e8135612674565b61266b8160200135612674565b610b1d81604001355b64174876e800811115610b1d5760405163c254ce4960e01b815260040160405180910390fd5b60008083601f8401126126ac57600080fd5b50813567ffffffffffffffff8111156126c457600080fd5b6020830191508360208285010111156126dc57600080fd5b9250929050565b600061010082840312156126f657600080fd5b50919050565b60006020828403121561270e57600080fd5b81356111d081612cf5565b60006020828403121561272b57600080fd5b81516111d081612cf5565b60008060008060008060008060c0898b03121561275257600080fd5b883561275d81612cf5565b9750602089013561276d81612cf5565b9650604089013561277d81612cf5565b955060608901359450608089013567ffffffffffffffff808211156127a157600080fd5b6127ad8c838d0161269a565b909650945060a08b01359150808211156127c657600080fd5b506127d38b828c0161269a565b999c989b5096995094979396929594505050565b600080604083850312156127fa57600080fd5b823561280581612cf5565b946020939093013593505050565b60008060006060848603121561282857600080fd5b833561283381612cf5565b95602085013595506040909401359392505050565b60006020828403121561285a57600080fd5b815180151581146111d057600080fd5b60006020828403121561287c57600080fd5b5035919050565b6000806040838503121561289657600080fd5b8235915060208301356128a881612cf5565b809150509250929050565b600080604083850312156128c657600080fd5b50508035926020909101359150565b6000602082840312156128e757600080fd5b81356001600160e01b0319811681146111d057600080fd5b600080610120838503121561291357600080fd5b823561291e81612cf5565b915061292d84602085016126e3565b90509250929050565b6000610100828403121561294957600080fd5b6111d083836126e3565b60006020828403121561296557600080fd5b5051919050565b60008151808452612984816020860160208601612bff565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516129d0816017850160208801612bff565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612a01816028840160208801612bff565b01602801949350505050565b6001600160a01b039290921682526020820152608060408201819052600090820181905260a06060830181905282015260c00190565b602080825282518282018190526000919060409081850190868401855b82811015612a8d57612a7d84835180518252602090810151910152565b9284019290850190600101612a60565b5091979650505050505050565b6020815260006111d0602083018461296c565b606081526000612ac0606083018661296c565b60208301949094525060400152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600080821280156001600160ff1b0384900385131615612b3f57612b3f612c71565b600160ff1b8390038412811615612b5857612b58612c71565b50500190565b60008219821115612b7157612b71612c71565b500190565b600082612b8557612b85612c87565b500490565b6000816000190483118215151615612ba457612ba4612c71565b500290565b60008083128015600160ff1b850184121615612bc757612bc7612c71565b6001600160ff1b0384018313811615612be257612be2612c71565b50500390565b600082821015612bfa57612bfa612c71565b500390565b60005b83811015612c1a578181015183820152602001612c02565b838111156118ad5750506000910152565b600081612c3a57612c3a612c71565b506000190190565b6000600019821415612c5657612c56612c71565b5060010190565b600082612c6c57612c6c612c87565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b1d57600080fdfe6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9ba2646970667358221220a6970f8c5d844f605a82d4eea53f0a779c35514c144053e6368f4468a0e46ba464736f6c63430008070033",
}

// StakePoolABI is the input ABI used to generate the binding from.
// Deprecated: Use StakePoolMetaData.ABI instead.
var StakePoolABI = StakePoolMetaData.ABI

// StakePoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakePoolMetaData.Bin instead.
var StakePoolBin = StakePoolMetaData.Bin

// DeployStakePool deploys a new Ethereum contract, binding an instance of StakePool to it.
func DeployStakePool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakePool, error) {
	parsed, err := StakePoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakePoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakePool{StakePoolCaller: StakePoolCaller{contract: contract}, StakePoolTransactor: StakePoolTransactor{contract: contract}, StakePoolFilterer: StakePoolFilterer{contract: contract}}, nil
}

// StakePool is an auto generated Go binding around an Ethereum contract.
type StakePool struct {
	StakePoolCaller     // Read-only binding to the contract
	StakePoolTransactor // Write-only binding to the contract
	StakePoolFilterer   // Log filterer for contract events
}

// StakePoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakePoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakePoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakePoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakePoolSession struct {
	Contract     *StakePool        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakePoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakePoolCallerSession struct {
	Contract *StakePoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StakePoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakePoolTransactorSession struct {
	Contract     *StakePoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StakePoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakePoolRaw struct {
	Contract *StakePool // Generic contract binding to access the raw methods on
}

// StakePoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakePoolCallerRaw struct {
	Contract *StakePoolCaller // Generic read-only contract binding to access the raw methods on
}

// StakePoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakePoolTransactorRaw struct {
	Contract *StakePoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakePool creates a new instance of StakePool, bound to a specific deployed contract.
func NewStakePool(address common.Address, backend bind.ContractBackend) (*StakePool, error) {
	contract, err := bindStakePool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakePool{StakePoolCaller: StakePoolCaller{contract: contract}, StakePoolTransactor: StakePoolTransactor{contract: contract}, StakePoolFilterer: StakePoolFilterer{contract: contract}}, nil
}

// NewStakePoolCaller creates a new read-only instance of StakePool, bound to a specific deployed contract.
func NewStakePoolCaller(address common.Address, caller bind.ContractCaller) (*StakePoolCaller, error) {
	contract, err := bindStakePool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakePoolCaller{contract: contract}, nil
}

// NewStakePoolTransactor creates a new write-only instance of StakePool, bound to a specific deployed contract.
func NewStakePoolTransactor(address common.Address, transactor bind.ContractTransactor) (*StakePoolTransactor, error) {
	contract, err := bindStakePool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakePoolTransactor{contract: contract}, nil
}

// NewStakePoolFilterer creates a new log filterer instance of StakePool, bound to a specific deployed contract.
func NewStakePoolFilterer(address common.Address, filterer bind.ContractFilterer) (*StakePoolFilterer, error) {
	contract, err := bindStakePool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakePoolFilterer{contract: contract}, nil
}

// bindStakePool binds a generic wrapper to an already deployed contract.
func bindStakePool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakePoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakePool *StakePoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakePool.Contract.StakePoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakePool *StakePoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.Contract.StakePoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakePool *StakePoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakePool.Contract.StakePoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakePool *StakePoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakePool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakePool *StakePoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakePool *StakePoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakePool.Contract.contract.Transact(opts, method, params...)
}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCaller) BOTROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "BOT_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolSession) BOTROLE() ([32]byte, error) {
	return _StakePool.Contract.BOTROLE(&_StakePool.CallOpts)
}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCallerSession) BOTROLE() ([32]byte, error) {
	return _StakePool.Contract.BOTROLE(&_StakePool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _StakePool.Contract.DEFAULTADMINROLE(&_StakePool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _StakePool.Contract.DEFAULTADMINROLE(&_StakePool.CallOpts)
}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolCaller) AddressStore(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "addressStore")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolSession) AddressStore() (common.Address, error) {
	return _StakePool.Contract.AddressStore(&_StakePool.CallOpts)
}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolCallerSession) AddressStore() (common.Address, error) {
	return _StakePool.Contract.AddressStore(&_StakePool.CallOpts)
}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolCaller) BnbToUnbond(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "bnbToUnbond")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolSession) BnbToUnbond() (*big.Int, error) {
	return _StakePool.Contract.BnbToUnbond(&_StakePool.CallOpts)
}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolCallerSession) BnbToUnbond() (*big.Int, error) {
	return _StakePool.Contract.BnbToUnbond(&_StakePool.CallOpts)
}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolCaller) BnbUnbonding(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "bnbUnbonding")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolSession) BnbUnbonding() (*big.Int, error) {
	return _StakePool.Contract.BnbUnbonding(&_StakePool.CallOpts)
}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolCallerSession) BnbUnbonding() (*big.Int, error) {
	return _StakePool.Contract.BnbUnbonding(&_StakePool.CallOpts)
}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolCaller) ClaimReqs(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "claimReqs", arg0, arg1)

	outstruct := new(struct {
		WeiToReturn *big.Int
		CreatedAt   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.WeiToReturn = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.CreatedAt = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolSession) ClaimReqs(arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	return _StakePool.Contract.ClaimReqs(&_StakePool.CallOpts, arg0, arg1)
}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolCallerSession) ClaimReqs(arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	return _StakePool.Contract.ClaimReqs(&_StakePool.CallOpts, arg0, arg1)
}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolCaller) ClaimReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "claimReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolSession) ClaimReserve() (*big.Int, error) {
	return _StakePool.Contract.ClaimReserve(&_StakePool.CallOpts)
}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolCallerSession) ClaimReserve() (*big.Int, error) {
	return _StakePool.Contract.ClaimReserve(&_StakePool.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minCrossChainTransfer, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolCaller) Config(opts *bind.CallOpts) (struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		BcStakingWallet       common.Address
		MinCrossChainTransfer *big.Int
		MinBNBDeposit         *big.Int
		MinTokenWithdrawal    *big.Int
		CooldownPeriod        *big.Int
		Fee                   FeeDistributionData
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BcStakingWallet = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.MinCrossChainTransfer = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinBNBDeposit = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinTokenWithdrawal = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.CooldownPeriod = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Fee = *abi.ConvertType(out[5], new(FeeDistributionData)).(*FeeDistributionData)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minCrossChainTransfer, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolSession) Config() (struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}, error) {
	return _StakePool.Contract.Config(&_StakePool.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minCrossChainTransfer, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolCallerSession) Config() (struct {
	BcStakingWallet       common.Address
	MinCrossChainTransfer *big.Int
	MinBNBDeposit         *big.Int
	MinTokenWithdrawal    *big.Int
	CooldownPeriod        *big.Int
	Fee                   FeeDistributionData
}, error) {
	return _StakePool.Contract.Config(&_StakePool.CallOpts)
}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolCaller) ExchangeRate(opts *bind.CallOpts) (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "exchangeRate")

	outstruct := new(struct {
		TotalWei        *big.Int
		PoolTokenSupply *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalWei = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PoolTokenSupply = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolSession) ExchangeRate() (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	return _StakePool.Contract.ExchangeRate(&_StakePool.CallOpts)
}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolCallerSession) ExchangeRate() (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	return _StakePool.Contract.ExchangeRate(&_StakePool.CallOpts)
}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolCaller) GetClaimRequestCount(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getClaimRequestCount", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolSession) GetClaimRequestCount(user common.Address) (*big.Int, error) {
	return _StakePool.Contract.GetClaimRequestCount(&_StakePool.CallOpts, user)
}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetClaimRequestCount(user common.Address) (*big.Int, error) {
	return _StakePool.Contract.GetClaimRequestCount(&_StakePool.CallOpts, user)
}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolCaller) GetPaginatedClaimRequests(opts *bind.CallOpts, user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getPaginatedClaimRequests", user, from, to)

	if err != nil {
		return *new([]StakePoolClaimRequest), err
	}

	out0 := *abi.ConvertType(out[0], new([]StakePoolClaimRequest)).(*[]StakePoolClaimRequest)

	return out0, err

}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolSession) GetPaginatedClaimRequests(user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	return _StakePool.Contract.GetPaginatedClaimRequests(&_StakePool.CallOpts, user, from, to)
}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolCallerSession) GetPaginatedClaimRequests(user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	return _StakePool.Contract.GetPaginatedClaimRequests(&_StakePool.CallOpts, user, from, to)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _StakePool.Contract.GetRoleAdmin(&_StakePool.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _StakePool.Contract.GetRoleAdmin(&_StakePool.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _StakePool.Contract.GetRoleMember(&_StakePool.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _StakePool.Contract.GetRoleMember(&_StakePool.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _StakePool.Contract.GetRoleMemberCount(&_StakePool.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _StakePool.Contract.GetRoleMemberCount(&_StakePool.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _StakePool.Contract.HasRole(&_StakePool.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _StakePool.Contract.HasRole(&_StakePool.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolSession) Paused() (bool, error) {
	return _StakePool.Contract.Paused(&_StakePool.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolCallerSession) Paused() (bool, error) {
	return _StakePool.Contract.Paused(&_StakePool.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakePool.Contract.SupportsInterface(&_StakePool.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakePool.Contract.SupportsInterface(&_StakePool.CallOpts, interfaceId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolTransactor) Claim(opts *bind.TransactOpts, index *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "claim", index)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolSession) Claim(index *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.Claim(&_StakePool.TransactOpts, index)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolTransactorSession) Claim(index *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.Claim(&_StakePool.TransactOpts, index)
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolTransactor) ClaimAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "claimAll")
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolSession) ClaimAll() (*types.Transaction, error) {
	return _StakePool.Contract.ClaimAll(&_StakePool.TransactOpts)
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolTransactorSession) ClaimAll() (*types.Transaction, error) {
	return _StakePool.Contract.ClaimAll(&_StakePool.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolSession) Deposit() (*types.Transaction, error) {
	return _StakePool.Contract.Deposit(&_StakePool.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolTransactorSession) Deposit() (*types.Transaction, error) {
	return _StakePool.Contract.Deposit(&_StakePool.TransactOpts)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolTransactor) EpochUpdate(opts *bind.TransactOpts, bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "epochUpdate", bnbRewards)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolSession) EpochUpdate(bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.EpochUpdate(&_StakePool.TransactOpts, bnbRewards)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolTransactorSession) EpochUpdate(bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.EpochUpdate(&_StakePool.TransactOpts, bnbRewards)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.GrantRole(&_StakePool.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.GrantRole(&_StakePool.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x2ff761d8.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactor) Initialize(opts *bind.TransactOpts, addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "initialize", addressStore_, config_)
}

// Initialize is a paid mutator transaction binding the contract method 0x2ff761d8.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolSession) Initialize(addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.Initialize(&_StakePool.TransactOpts, addressStore_, config_)
}

// Initialize is a paid mutator transaction binding the contract method 0x2ff761d8.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactorSession) Initialize(addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.Initialize(&_StakePool.TransactOpts, addressStore_, config_)
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns()
func (_StakePool *StakePoolTransactor) InitiateDelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "initiateDelegation")
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns()
func (_StakePool *StakePoolSession) InitiateDelegation() (*types.Transaction, error) {
	return _StakePool.Contract.InitiateDelegation(&_StakePool.TransactOpts)
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns()
func (_StakePool *StakePoolTransactorSession) InitiateDelegation() (*types.Transaction, error) {
	return _StakePool.Contract.InitiateDelegation(&_StakePool.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolSession) Pause() (*types.Transaction, error) {
	return _StakePool.Contract.Pause(&_StakePool.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolTransactorSession) Pause() (*types.Transaction, error) {
	return _StakePool.Contract.Pause(&_StakePool.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RenounceRole(&_StakePool.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RenounceRole(&_StakePool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RevokeRole(&_StakePool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RevokeRole(&_StakePool.TransactOpts, role, account)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolTransactor) TokensReceived(opts *bind.TransactOpts, arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "tokensReceived", arg0, from, to, amount, arg4, arg5)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolSession) TokensReceived(arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.Contract.TokensReceived(&_StakePool.TransactOpts, arg0, from, to, amount, arg4, arg5)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolTransactorSession) TokensReceived(arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.Contract.TokensReceived(&_StakePool.TransactOpts, arg0, from, to, amount, arg4, arg5)
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolTransactor) UnbondingFinished(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unbondingFinished")
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolSession) UnbondingFinished() (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingFinished(&_StakePool.TransactOpts)
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolTransactorSession) UnbondingFinished() (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingFinished(&_StakePool.TransactOpts)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 bnbUnbonding_) returns()
func (_StakePool *StakePoolTransactor) UnbondingInitiated(opts *bind.TransactOpts, bnbUnbonding_ *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unbondingInitiated", bnbUnbonding_)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 bnbUnbonding_) returns()
func (_StakePool *StakePoolSession) UnbondingInitiated(bnbUnbonding_ *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingInitiated(&_StakePool.TransactOpts, bnbUnbonding_)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 bnbUnbonding_) returns()
func (_StakePool *StakePoolTransactorSession) UnbondingInitiated(bnbUnbonding_ *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingInitiated(&_StakePool.TransactOpts, bnbUnbonding_)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolSession) Unpause() (*types.Transaction, error) {
	return _StakePool.Contract.Unpause(&_StakePool.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolTransactorSession) Unpause() (*types.Transaction, error) {
	return _StakePool.Contract.Unpause(&_StakePool.TransactOpts)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x9c0cced1.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactor) UpdateConfig(opts *bind.TransactOpts, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "updateConfig", config_)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x9c0cced1.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolSession) UpdateConfig(config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.UpdateConfig(&_StakePool.TransactOpts, config_)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x9c0cced1.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactorSession) UpdateConfig(config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.UpdateConfig(&_StakePool.TransactOpts, config_)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakePool *StakePoolTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakePool *StakePoolSession) Receive() (*types.Transaction, error) {
	return _StakePool.Contract.Receive(&_StakePool.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_StakePool *StakePoolTransactorSession) Receive() (*types.Transaction, error) {
	return _StakePool.Contract.Receive(&_StakePool.TransactOpts)
}

// StakePoolClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the StakePool contract.
type StakePoolClaimIterator struct {
	Event *StakePoolClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolClaim represents a Claim event raised by the StakePool contract.
type StakePoolClaim struct {
	User      common.Address
	Req       StakePoolClaimRequest
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterClaim(opts *bind.FilterOpts, user []common.Address) (*StakePoolClaimIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Claim", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolClaimIterator{contract: _StakePool.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *StakePoolClaim, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Claim", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolClaim)
				if err := _StakePool.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseClaim(log types.Log) (*StakePoolClaim, error) {
	event := new(StakePoolClaim)
	if err := _StakePool.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolConfigUpdatedIterator is returned from FilterConfigUpdated and is used to iterate over the raw logs and unpacked data for ConfigUpdated events raised by the StakePool contract.
type StakePoolConfigUpdatedIterator struct {
	Event *StakePoolConfigUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolConfigUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolConfigUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolConfigUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolConfigUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolConfigUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolConfigUpdated represents a ConfigUpdated event raised by the StakePool contract.
type StakePoolConfigUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterConfigUpdated is a free log retrieval operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) FilterConfigUpdated(opts *bind.FilterOpts) (*StakePoolConfigUpdatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "ConfigUpdated")
	if err != nil {
		return nil, err
	}
	return &StakePoolConfigUpdatedIterator{contract: _StakePool.contract, event: "ConfigUpdated", logs: logs, sub: sub}, nil
}

// WatchConfigUpdated is a free log subscription operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) WatchConfigUpdated(opts *bind.WatchOpts, sink chan<- *StakePoolConfigUpdated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "ConfigUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolConfigUpdated)
				if err := _StakePool.contract.UnpackLog(event, "ConfigUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigUpdated is a log parse operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) ParseConfigUpdated(log types.Log) (*StakePoolConfigUpdated, error) {
	event := new(StakePoolConfigUpdated)
	if err := _StakePool.contract.UnpackLog(event, "ConfigUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the StakePool contract.
type StakePoolDepositIterator struct {
	Event *StakePoolDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolDeposit represents a Deposit event raised by the StakePool contract.
type StakePoolDeposit struct {
	User            common.Address
	BnbAmount       *big.Int
	PoolTokenAmount *big.Int
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address) (*StakePoolDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolDepositIterator{contract: _StakePool.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StakePoolDeposit, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolDeposit)
				if err := _StakePool.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseDeposit(log types.Log) (*StakePoolDeposit, error) {
	event := new(StakePoolDeposit)
	if err := _StakePool.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolEpochUpdateIterator is returned from FilterEpochUpdate and is used to iterate over the raw logs and unpacked data for EpochUpdate events raised by the StakePool contract.
type StakePoolEpochUpdateIterator struct {
	Event *StakePoolEpochUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolEpochUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolEpochUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolEpochUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolEpochUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolEpochUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolEpochUpdate represents a EpochUpdate event raised by the StakePool contract.
type StakePoolEpochUpdate struct {
	BnbRewards *big.Int
	FeeTokens  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEpochUpdate is a free log retrieval operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) FilterEpochUpdate(opts *bind.FilterOpts) (*StakePoolEpochUpdateIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "EpochUpdate")
	if err != nil {
		return nil, err
	}
	return &StakePoolEpochUpdateIterator{contract: _StakePool.contract, event: "EpochUpdate", logs: logs, sub: sub}, nil
}

// WatchEpochUpdate is a free log subscription operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) WatchEpochUpdate(opts *bind.WatchOpts, sink chan<- *StakePoolEpochUpdate) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "EpochUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolEpochUpdate)
				if err := _StakePool.contract.UnpackLog(event, "EpochUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochUpdate is a log parse operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) ParseEpochUpdate(log types.Log) (*StakePoolEpochUpdate, error) {
	event := new(StakePoolEpochUpdate)
	if err := _StakePool.contract.UnpackLog(event, "EpochUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StakePool contract.
type StakePoolInitializedIterator struct {
	Event *StakePoolInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitialized represents a Initialized event raised by the StakePool contract.
type StakePoolInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakePoolInitializedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitializedIterator{contract: _StakePool.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakePoolInitialized) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitialized)
				if err := _StakePool.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) ParseInitialized(log types.Log) (*StakePoolInitialized, error) {
	event := new(StakePoolInitialized)
	if err := _StakePool.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitiateDelegationShortCircuitIterator is returned from FilterInitiateDelegationShortCircuit and is used to iterate over the raw logs and unpacked data for InitiateDelegationShortCircuit events raised by the StakePool contract.
type StakePoolInitiateDelegationShortCircuitIterator struct {
	Event *StakePoolInitiateDelegationShortCircuit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitiateDelegationShortCircuitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitiateDelegationShortCircuit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitiateDelegationShortCircuit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitiateDelegationShortCircuitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitiateDelegationShortCircuitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitiateDelegationShortCircuit represents a InitiateDelegationShortCircuit event raised by the StakePool contract.
type StakePoolInitiateDelegationShortCircuit struct {
	ShortCircuitAmount *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterInitiateDelegationShortCircuit is a free log retrieval operation binding the contract event 0x398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd1.
//
// Solidity: event InitiateDelegation_ShortCircuit(uint256 shortCircuitAmount)
func (_StakePool *StakePoolFilterer) FilterInitiateDelegationShortCircuit(opts *bind.FilterOpts) (*StakePoolInitiateDelegationShortCircuitIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "InitiateDelegation_ShortCircuit")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitiateDelegationShortCircuitIterator{contract: _StakePool.contract, event: "InitiateDelegation_ShortCircuit", logs: logs, sub: sub}, nil
}

// WatchInitiateDelegationShortCircuit is a free log subscription operation binding the contract event 0x398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd1.
//
// Solidity: event InitiateDelegation_ShortCircuit(uint256 shortCircuitAmount)
func (_StakePool *StakePoolFilterer) WatchInitiateDelegationShortCircuit(opts *bind.WatchOpts, sink chan<- *StakePoolInitiateDelegationShortCircuit) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "InitiateDelegation_ShortCircuit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitiateDelegationShortCircuit)
				if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_ShortCircuit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateDelegationShortCircuit is a log parse operation binding the contract event 0x398a2b33a17101f76ac0227b1c277b01d5ce921579fc0ebcc8a10083ba53fcd1.
//
// Solidity: event InitiateDelegation_ShortCircuit(uint256 shortCircuitAmount)
func (_StakePool *StakePoolFilterer) ParseInitiateDelegationShortCircuit(log types.Log) (*StakePoolInitiateDelegationShortCircuit, error) {
	event := new(StakePoolInitiateDelegationShortCircuit)
	if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_ShortCircuit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitiateDelegationTransferOutIterator is returned from FilterInitiateDelegationTransferOut and is used to iterate over the raw logs and unpacked data for InitiateDelegationTransferOut events raised by the StakePool contract.
type StakePoolInitiateDelegationTransferOutIterator struct {
	Event *StakePoolInitiateDelegationTransferOut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitiateDelegationTransferOutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitiateDelegationTransferOut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitiateDelegationTransferOut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitiateDelegationTransferOutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitiateDelegationTransferOutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitiateDelegationTransferOut represents a InitiateDelegationTransferOut event raised by the StakePool contract.
type StakePoolInitiateDelegationTransferOut struct {
	TransferOutAmount *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterInitiateDelegationTransferOut is a free log retrieval operation binding the contract event 0x12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa.
//
// Solidity: event InitiateDelegation_TransferOut(uint256 transferOutAmount)
func (_StakePool *StakePoolFilterer) FilterInitiateDelegationTransferOut(opts *bind.FilterOpts) (*StakePoolInitiateDelegationTransferOutIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "InitiateDelegation_TransferOut")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitiateDelegationTransferOutIterator{contract: _StakePool.contract, event: "InitiateDelegation_TransferOut", logs: logs, sub: sub}, nil
}

// WatchInitiateDelegationTransferOut is a free log subscription operation binding the contract event 0x12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa.
//
// Solidity: event InitiateDelegation_TransferOut(uint256 transferOutAmount)
func (_StakePool *StakePoolFilterer) WatchInitiateDelegationTransferOut(opts *bind.WatchOpts, sink chan<- *StakePoolInitiateDelegationTransferOut) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "InitiateDelegation_TransferOut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitiateDelegationTransferOut)
				if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_TransferOut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateDelegationTransferOut is a log parse operation binding the contract event 0x12ba36faeb29044a46a4f5a2b0a55480ca8c22bd52e1bad4f913cd1c6a2811fa.
//
// Solidity: event InitiateDelegation_TransferOut(uint256 transferOutAmount)
func (_StakePool *StakePoolFilterer) ParseInitiateDelegationTransferOut(log types.Log) (*StakePoolInitiateDelegationTransferOut, error) {
	event := new(StakePoolInitiateDelegationTransferOut)
	if err := _StakePool.contract.UnpackLog(event, "InitiateDelegation_TransferOut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the StakePool contract.
type StakePoolPausedIterator struct {
	Event *StakePoolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolPaused represents a Paused event raised by the StakePool contract.
type StakePoolPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) FilterPaused(opts *bind.FilterOpts) (*StakePoolPausedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StakePoolPausedIterator{contract: _StakePool.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StakePoolPaused) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolPaused)
				if err := _StakePool.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) ParsePaused(log types.Log) (*StakePoolPaused, error) {
	event := new(StakePoolPaused)
	if err := _StakePool.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the StakePool contract.
type StakePoolRoleAdminChangedIterator struct {
	Event *StakePoolRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleAdminChanged represents a RoleAdminChanged event raised by the StakePool contract.
type StakePoolRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*StakePoolRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleAdminChangedIterator{contract: _StakePool.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *StakePoolRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleAdminChanged)
				if err := _StakePool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) ParseRoleAdminChanged(log types.Log) (*StakePoolRoleAdminChanged, error) {
	event := new(StakePoolRoleAdminChanged)
	if err := _StakePool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the StakePool contract.
type StakePoolRoleGrantedIterator struct {
	Event *StakePoolRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleGranted represents a RoleGranted event raised by the StakePool contract.
type StakePoolRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*StakePoolRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleGrantedIterator{contract: _StakePool.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *StakePoolRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleGranted)
				if err := _StakePool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) ParseRoleGranted(log types.Log) (*StakePoolRoleGranted, error) {
	event := new(StakePoolRoleGranted)
	if err := _StakePool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the StakePool contract.
type StakePoolRoleRevokedIterator struct {
	Event *StakePoolRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleRevoked represents a RoleRevoked event raised by the StakePool contract.
type StakePoolRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*StakePoolRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleRevokedIterator{contract: _StakePool.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *StakePoolRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleRevoked)
				if err := _StakePool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) ParseRoleRevoked(log types.Log) (*StakePoolRoleRevoked, error) {
	event := new(StakePoolRoleRevoked)
	if err := _StakePool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnbondingFinishedIterator is returned from FilterUnbondingFinished and is used to iterate over the raw logs and unpacked data for UnbondingFinished events raised by the StakePool contract.
type StakePoolUnbondingFinishedIterator struct {
	Event *StakePoolUnbondingFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnbondingFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnbondingFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnbondingFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnbondingFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnbondingFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnbondingFinished represents a UnbondingFinished event raised by the StakePool contract.
type StakePoolUnbondingFinished struct {
	UnbondedAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnbondingFinished is a free log retrieval operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) FilterUnbondingFinished(opts *bind.FilterOpts) (*StakePoolUnbondingFinishedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "UnbondingFinished")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnbondingFinishedIterator{contract: _StakePool.contract, event: "UnbondingFinished", logs: logs, sub: sub}, nil
}

// WatchUnbondingFinished is a free log subscription operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) WatchUnbondingFinished(opts *bind.WatchOpts, sink chan<- *StakePoolUnbondingFinished) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "UnbondingFinished")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnbondingFinished)
				if err := _StakePool.contract.UnpackLog(event, "UnbondingFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingFinished is a log parse operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) ParseUnbondingFinished(log types.Log) (*StakePoolUnbondingFinished, error) {
	event := new(StakePoolUnbondingFinished)
	if err := _StakePool.contract.UnpackLog(event, "UnbondingFinished", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnbondingInitiatedIterator is returned from FilterUnbondingInitiated and is used to iterate over the raw logs and unpacked data for UnbondingInitiated events raised by the StakePool contract.
type StakePoolUnbondingInitiatedIterator struct {
	Event *StakePoolUnbondingInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnbondingInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnbondingInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnbondingInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnbondingInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnbondingInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnbondingInitiated represents a UnbondingInitiated event raised by the StakePool contract.
type StakePoolUnbondingInitiated struct {
	BnbUnbonding *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUnbondingInitiated is a free log retrieval operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) FilterUnbondingInitiated(opts *bind.FilterOpts) (*StakePoolUnbondingInitiatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "UnbondingInitiated")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnbondingInitiatedIterator{contract: _StakePool.contract, event: "UnbondingInitiated", logs: logs, sub: sub}, nil
}

// WatchUnbondingInitiated is a free log subscription operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) WatchUnbondingInitiated(opts *bind.WatchOpts, sink chan<- *StakePoolUnbondingInitiated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "UnbondingInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnbondingInitiated)
				if err := _StakePool.contract.UnpackLog(event, "UnbondingInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingInitiated is a log parse operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) ParseUnbondingInitiated(log types.Log) (*StakePoolUnbondingInitiated, error) {
	event := new(StakePoolUnbondingInitiated)
	if err := _StakePool.contract.UnpackLog(event, "UnbondingInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the StakePool contract.
type StakePoolUnpausedIterator struct {
	Event *StakePoolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnpaused represents a Unpaused event raised by the StakePool contract.
type StakePoolUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*StakePoolUnpausedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnpausedIterator{contract: _StakePool.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StakePoolUnpaused) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnpaused)
				if err := _StakePool.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) ParseUnpaused(log types.Log) (*StakePoolUnpaused, error) {
	event := new(StakePoolUnpaused)
	if err := _StakePool.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the StakePool contract.
type StakePoolWithdrawIterator struct {
	Event *StakePoolWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolWithdraw represents a Withdraw event raised by the StakePool contract.
type StakePoolWithdraw struct {
	User            common.Address
	PoolTokenAmount *big.Int
	BnbAmount       *big.Int
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterWithdraw(opts *bind.FilterOpts, user []common.Address) (*StakePoolWithdrawIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Withdraw", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolWithdrawIterator{contract: _StakePool.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StakePoolWithdraw, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Withdraw", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolWithdraw)
				if err := _StakePool.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseWithdraw(log types.Log) (*StakePoolWithdraw, error) {
	event := new(StakePoolWithdraw)
	if err := _StakePool.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
