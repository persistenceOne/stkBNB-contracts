// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	BcStakingWallet    common.Address
	MinBNBDeposit      *big.Int
	MinTokenWithdrawal *big.Int
	CooldownPeriod     *big.Int
	Fee                FeeDistributionData
}

// FeeDistributionData is an auto generated low-level Go binding around an user-defined struct.
type FeeDistributionData struct {
	Reward   *big.Int
	Deposit  *big.Int
	Withdraw *big.Int
}

// StakePoolClaimRequest is an auto generated low-level Go binding around an user-defined struct.
type StakePoolClaimRequest struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}

// StakePoolMetaData contains all meta data concerning the StakePool contract.
var StakePoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CantClaimBeforeDeadline\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"DustNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFundsToSatisfyClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"}],\"name\":\"LessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumeratorMoreThanBasis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausableNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PausablePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ToIndexMustBeGreaterThanFromIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMintingToSelfNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferToSelfNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UnexpectedlyReceivedTokensForSomeoneElse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structStakePool.ClaimRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakableBNB\",\"type\":\"uint256\"}],\"name\":\"DelegationInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokens\",\"type\":\"uint256\"}],\"name\":\"EpochUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unbondedAmount\",\"type\":\"uint256\"}],\"name\":\"UnbondingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbUnbonding\",\"type\":\"uint256\"}],\"name\":\"UnbondingInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressStore\",\"outputs\":[{\"internalType\":\"contractIAddressStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbToUnbond\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimReqs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"}],\"name\":\"epochUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getPaginatedClaimRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weiToReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"structStakePool.ClaimRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakableBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAddressStore\",\"name\":\"addressStore_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"structConfig.Data\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondingFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnbUnbonding\",\"type\":\"uint256\"}],\"name\":\"unbondingInitiated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bcStakingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBNBDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"structFeeDistribution.Data\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"structConfig.Data\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612c9380620000f46000396000f3fe6080604052600436106101ed5760003560e01c80637550c0501161010d578063a217fddf116100a0578063d0e30db01161006f578063d0e30db01461060d578063d1058e5914610615578063d547741f1461062a578063f773d87d1461064a578063fa6c2f7d1461066a57600080fd5b8063a217fddf14610596578063b1503774146105ab578063c773c8f7146105cd578063ca15c873146105ed57600080fd5b80638b2bf29f116100dc5780638b2bf29f146104e85780638be78083146105085780639010d07c1461053e57806391d148541461057657600080fd5b80637550c050146103fb57806375ccc37a1461041057806379502c551461043d5780638456cb59146104d357600080fd5b80633f4ba83a116101855780635c975abb116101545780635c975abb146103975780635d97914c146103af5780636eb95940146103c557806372bd5c94146103db57600080fd5b80633f4ba83a146103375780633fe5f0541461034c57806340f63e481461036257806354cc6d9d1461038257600080fd5b80632f2ff15d116101c15780632f2ff15d146102a757806336568abe146102c7578063379607f5146102e75780633ba0b9a91461030757600080fd5b806223de29146101f257806301ffc9a7146102145780631bdac81a14610249578063248a9ca314610269575b600080fd5b3480156101fe57600080fd5b5061021261020d36600461266a565b61067f565b005b34801561022057600080fd5b5061023461022f366004612809565b610821565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b50610212610264366004612833565b61084c565b34801561027557600080fd5b5061029961028436600461279e565b60009081526065602052604090206001015490565b604051908152602001610240565b3480156102b357600080fd5b506102126102c23660046127b7565b610961565b3480156102d357600080fd5b506102126102e23660046127b7565b610986565b3480156102f357600080fd5b5061021261030236600461279e565b610a04565b34801561031357600080fd5b5060d65460d754610322919082565b60408051928352602083019190915201610240565b34801561034357600080fd5b50610212610a47565b34801561035857600080fd5b5061029960d55481565b34801561036e57600080fd5b5061021261037d36600461286a565b610a9b565b34801561038e57600080fd5b50610212610ade565b3480156103a357600080fd5b5060d15460ff16610234565b3480156103bb57600080fd5b5061029960d35481565b3480156103d157600080fd5b5061029960d45481565b3480156103e757600080fd5b506102126103f636600461279e565b610c57565b34801561040757600080fd5b50610299610e95565b34801561041c57600080fd5b5061043061042b366004612747565b610f49565b6040516102409190612976565b34801561044957600080fd5b5060ca5460cb5460cc5460cd546040805160608101825260ce54815260cf54602082015260d0549181019190915261048b946001600160a01b03169392919085565b604080516001600160a01b039096168652602080870195909552858101939093526060850191909152805160808501529182015160a0840152015160c082015260e001610240565b3480156104df57600080fd5b50610212611105565b3480156104f457600080fd5b5061021261050336600461279e565b611155565b34801561051457600080fd5b50610299610523366004612630565b6001600160a01b0316600090815260d8602052604090205490565b34801561054a57600080fd5b5061055e6105593660046127e7565b6111d5565b6040516001600160a01b039091168152602001610240565b34801561058257600080fd5b506102346105913660046127b7565b6111f4565b3480156105a257600080fd5b50610299600081565b3480156105b757600080fd5b50610299600080516020612c3e83398151915281565b3480156105d957600080fd5b5060c95461055e906001600160a01b031681565b3480156105f957600080fd5b5061029961060836600461279e565b61121f565b610212611236565b34801561062157600080fd5b506102126114f4565b34801561063657600080fd5b506102126106453660046127b7565b61155c565b34801561065657600080fd5b5061032261066536600461271b565b611581565b34801561067657600080fd5b506102996115bd565b610687611768565b61068f61178c565b60408051808201909152600a81526915da5d1a191c985dd85b60b21b602082015260cc54866106bf8383836117b7565b60c960009054906101000a90046001600160a01b03166001600160a01b031663e016dedc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610745919061264d565b6001600160a01b0316336001600160a01b0316146107765760405163399a77fd60e01b815260040160405180910390fd5b6001600160a01b038a1661079d5760405163eb577da760e01b815260040160405180910390fd5b6001600160a01b038a163014156107c7576040516315bddb7b60e01b815260040160405180910390fd5b6001600160a01b0389163014610800576040516338a5c37560e01b81526001600160a01b038a1660048201526024015b60405180910390fd5b61080a8a89611814565b505050610817600160d255565b5050505050505050565b60006001600160e01b03198216635a05180f60e01b1480610846575061084682611b17565b92915050565b600054610100900460ff161580801561086c5750600054600160ff909116105b806108865750303b158015610886575060005460ff166001145b6108e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b6000805460ff19166001179055801561090c576000805461ff0019166101001790555b6109168383611b4c565b801561095c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60008281526065602052604090206001015461097c81611b7d565b61095c8383611b87565b6001600160a01b03811633146109f65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107f7565b610a008282611ba9565b5050565b610a0c611768565b610a1461178c565b610a1d81611bcb565b610a3a57604051637e868a7360e01b815260040160405180910390fd5b610a44600160d255565b50565b6000610a5281611b7d565b610a5a611dea565b60d1805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6000610aa681611b7d565b610ab160ca83611e0c565b6040517ffe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d190600090a15050565b610ae6611768565b600080516020612c3e833981519152610afe81611b7d565b60c954604080516388d1161d60e01b815290516000926001600160a01b0316916388d1161d916004808301926020929190829003018186803b158015610b4357600080fd5b505afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b919061264d565b6001600160a01b03166347066d026040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed9190612886565b90508060d46000828254610c019190612b1b565b925050819055508060d56000828254610c1a9190612a91565b90915550506040518181527f31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5906020015b60405180910390a15050565b610c5f611768565b600080516020612c3e833981519152610c7781611b7d565b60ce54600090610c879084611e1f565b90506000818460d660000154610c9d9190612a91565b610ca79190612b1b565b60d754610cb49084612abd565b610cbe9190612aa9565b9050610ceb604051806040016040528086815260200183815250600060d6611e3b9092919063ffffffff16565b60c960009054906101000a90046001600160a01b03166001600160a01b031663e016dedc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061264d565b6001600160a01b031663dcdc7dd060c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e05919061264d565b836040518363ffffffff1660e01b8152600401610e23929190612940565b600060405180830381600087803b158015610e3d57600080fd5b505af1158015610e51573d6000803e3d6000fd5b505060408051878152602081018590527fcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1935001905060405180910390a150505050565b6000806110046001600160a01b031663149d14d96040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190612886565b90508060d554610f1b9190612a91565b471115610f41578060d55447610f319190612b1b565b610f3b9190612b1b565b91505090565b600091505090565b6001600160a01b038316600090815260d860205260409020546060908310610f875760405163112517f360e21b8152600481018490526024016107f7565b818310610fb157604051630dfc263960e01b815260048101849052602481018390526044016107f7565b6001600160a01b038416600090815260d86020526040902054821115610fed576001600160a01b038416600090815260d8602052604090205491505b6000610ff98484612b1b565b67ffffffffffffffff81111561101157611011612c12565b60405190808252806020026020018201604052801561105657816020015b604080518082019091526000808252602082015281526020019060019003908161102f5790505b50905060005b6110668585612b1b565b8110156110fc576001600160a01b038616600090815260d86020526040902061108f8287612a91565b8154811061109f5761109f612bfc565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508282815181106110de576110de612bfc565b602002602001018190525080806110f490612b75565b91505061105c565b50949350505050565b600061111081611b7d565b611118611768565b60d1805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610a90565b61115d611768565b600080516020612c3e83398151915261117581611b7d565b8160d360008282546111879190612adc565b925050819055508160d460008282546111a09190612a91565b90915550506040518281527ffcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba8790602001610c4b565b60008281526097602052604081206111ed9083611ece565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081815260976020526040812061084690611eda565b61123e611768565b61124661178c565b60408051808201909152600781526611195c1bdcda5d60ca1b602082015260cb54346112738383836117b7565b34600061128160d683611ee4565b60cf549091506000906112949083611e1f565b905060006112a28284612b1b565b90506112cf604051806040016040528086815260200185815250600060d6611e3b9092919063ffffffff16565b60c95460408051633805b7b760e21b815290516000926001600160a01b03169163e016dedc916004808301926020929190829003018186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c919061264d565b604051630dcdc7dd60e41b81529091506001600160a01b0382169063dcdc7dd09061137d9033908690600401612940565b600060405180830381600087803b15801561139757600080fd5b505af11580156113ab573d6000803e3d6000fd5b50505050600083111561149e57806001600160a01b031663dcdc7dd060c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b15801561141557600080fd5b505afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d919061264d565b856040518363ffffffff1660e01b815260040161146b929190612940565b600060405180830381600087803b15801561148557600080fd5b505af1158015611499573d6000803e3d6000fd5b505050505b60408051348152602081018490524281830152905133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e919081900360600190a250505050505050506114f2600160d255565b565b6114fc611768565b61150461178c565b33600090815260d86020526040812054905b818110156115505761152781611bcb565b1561153e578161153681612b5e565b925050611516565b8061154881612b75565b915050611516565b50506114f2600160d255565b60008281526065602052604090206001015461157781611b7d565b61095c8383611ba9565b60d8602052816000526040600020818154811061159d57600080fd5b600091825260209091206002909102018054600190910154909250905082565b60006115c7611768565b600080516020612c3e8339815191526115df81611b7d565b60006110046001600160a01b031663149d14d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561161c57600080fd5b505afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190612886565b90506000611660610e95565b9050801561172e5761100463aa7415f561167a8484612a91565b60ca546000906001600160a01b03168561169642610e10612a91565b6040516001600160e01b031960e088901b1681526001600160a01b039485166004820152939092166024840152604483015267ffffffffffffffff1660648201526084016020604051808303818588803b1580156116f357600080fd5b505af1158015611707573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061172c919061277c565b505b6040518181527f2ca01315053cca0f4d111bf98e740fe5c02bc603936c60659c8502e644c2e7739060200160405180910390a19250505090565b60d15460ff16156114f25760405163928dfa7760e01b815260040160405180910390fd5b600260d25414156117b057604051633ee5aeb560e01b815260040160405180910390fd5b600260d255565b818110156117de57828282604051631a14281160e01b81526004016107f7939291906129e0565b60006117ea8383612b90565b9050801561180e57604051634301c31b60e01b8152600481018290526024016107f7565b50505050565b60d0546000906118249083611e1f565b905060006118328284612b1b565b9050600061184160d683611f14565b6001600160a01b038616600090815260d86020908152604080832081518083019092528482524282840190815281546001818101845592865293852092516002909402909201928355905191015560d3805492935083929091906118a6908490612a50565b909155505060408051808201909152818152602081018390526118cd9060d6906001611e3b565b60c95460408051633805b7b760e21b815290516000926001600160a01b03169163e016dedc916004808301926020929190829003018186803b15801561191257600080fd5b505afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a919061264d565b6040805163fe9d930360e01b8152600481018690526024810191909152600060448201529091506001600160a01b0382169063fe9d930390606401600060405180830381600087803b15801561199f57600080fd5b505af11580156119b3573d6000803e3d6000fd5b505050506000841115611ac457806001600160a01b0316639bd9bbc660c960009054906101000a90046001600160a01b03166001600160a01b031663ec0f7cf06040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1d57600080fd5b505afa158015611a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a55919061264d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526060604482015260006064820152608401600060405180830381600087803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b505050505b6040805186815260208101849052428183015290516001600160a01b038816917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94919081900360600190a2505050505050565b60006001600160e01b03198216637965db0b60e01b148061084657506301ffc9a760e01b6001600160e01b0319831614610846565b600054610100900460ff16611b735760405162461bcd60e51b81526004016107f790612a05565b610a008282611f5c565b610a448133612073565b611b9182826120d7565b600082815260976020526040902061095c908261215d565b611bb38282612172565b600082815260976020526040902061095c90826121d9565b33600090815260d860205260408120548210611bfd5760405163112517f360e21b8152600481018390526024016107f7565b33600090815260d860205260408120805484908110611c1e57611c1e612bfc565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050611c56816121ee565b611c635750600092915050565b8051471015611c855760405163e723ea5960e01b815260040160405180910390fd5b805160d58054600090611c99908490612b1b565b909155505033600090815260d8602052604090208054611cbb90600190612b1b565b81548110611ccb57611ccb612bfc565b906000526020600020906002020160d86000336001600160a01b03166001600160a01b031681526020019081526020016000208481548110611d0f57611d0f612bfc565b600091825260208083208454600290930201918255600193840154939091019290925533815260d890915260409020805480611d4d57611d4d612be6565b60008281526020812060026000199093019283020181815560010181905591558151604051339282156108fc02929190818181858888f19350505050158015611d9a573d6000803e3d6000fd5b506040805182518152602080840151908201524281830152905133917f68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6919081900360600190a250600192915050565b60d15460ff166114f25760405162c5619760e61b815260040160405180910390fd5b611e158161220a565b610a008282612216565b600064174876e800611e318484612abd565b6111ed9190612aa9565b6000816001811115611e4f57611e4f612bd0565b1415611e9257815183548490600090611e69908490612a91565b90915550506020820151600184018054600090611e87908490612a91565b9091555061095c9050565b815183548490600090611ea6908490612b1b565b90915550506020820151600184018054600090611ec4908490612b1b565b9091555050505050565b60006111ed8383612281565b6000610846825490565b81546000901580611ef757506001830154155b15611f03575080610846565b82546001840154611e319084612abd565b81546000908190611f259084612abd565b600185015490915080821080611f39575080155b15611f4957600092505050610846565b611f538183612aa9565b95945050505050565b600054610100900460ff16611f835760405162461bcd60e51b81526004016107f790612a05565b60c980546001600160a01b0319166001600160a01b038416179055611fa960ca82611e0c565b60d1805460ff1916600190811790915560d255600060d381905560d481905560d581905560d681905560d7556040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801561204e57600080fd5b505af1158015612062573d6000803e3d6000fd5b50505050610a006000801b33611b87565b61207d82826111f4565b610a0057612095816001600160a01b031660146122ab565b6120a08360206122ab565b6040516020016120b19291906128cb565b60408051601f198184030181529082905262461bcd60e51b82526107f7916004016129cd565b6120e182826111f4565b610a005760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006111ed836001600160a01b038416612447565b61217c82826111f4565b15610a005760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006111ed836001600160a01b038416612496565b60cd54602082015160009161220291612a91565b421192915050565b610a4481608001612589565b6122236020820182612630565b82546001600160a01b0319166001600160a01b0391909116178255602081013560018301556040810135600283015560608101356003830155610a006004830160808301803582556020810135600183015560400135600290910155565b600082600001828154811061229857612298612bfc565b9060005260206000200154905092915050565b606060006122ba836002612abd565b6122c5906002612a91565b67ffffffffffffffff8111156122dd576122dd612c12565b6040519080825280601f01601f191660200182016040528015612307576020820181803683370190505b509050600360fc1b8160008151811061232257612322612bfc565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061235157612351612bfc565b60200101906001600160f81b031916908160001a9053506000612375846002612abd565b612380906001612a91565b90505b60018111156123f8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123b4576123b4612bfc565b1a60f81b8282815181106123ca576123ca612bfc565b60200101906001600160f81b031916908160001a90535060049490941c936123f181612b5e565b9050612383565b5083156111ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107f7565b600081815260018301602052604081205461248e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610846565b506000610846565b6000818152600183016020526040812054801561257f5760006124ba600183612b1b565b85549091506000906124ce90600190612b1b565b90508181146125335760008660000182815481106124ee576124ee612bfc565b906000526020600020015490508087600001848154811061251157612511612bfc565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061254457612544612be6565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610846565b6000915050610846565b61259381356125a9565b6125a081602001356125a9565b610a4481604001355b64174876e800811115610a445760405163c254ce4960e01b815260040160405180910390fd5b60008083601f8401126125e157600080fd5b50813567ffffffffffffffff8111156125f957600080fd5b60208301915083602082850101111561261157600080fd5b9250929050565b600060e0828403121561262a57600080fd5b50919050565b60006020828403121561264257600080fd5b81356111ed81612c28565b60006020828403121561265f57600080fd5b81516111ed81612c28565b60008060008060008060008060c0898b03121561268657600080fd5b883561269181612c28565b975060208901356126a181612c28565b965060408901356126b181612c28565b955060608901359450608089013567ffffffffffffffff808211156126d557600080fd5b6126e18c838d016125cf565b909650945060a08b01359150808211156126fa57600080fd5b506127078b828c016125cf565b999c989b5096995094979396929594505050565b6000806040838503121561272e57600080fd5b823561273981612c28565b946020939093013593505050565b60008060006060848603121561275c57600080fd5b833561276781612c28565b95602085013595506040909401359392505050565b60006020828403121561278e57600080fd5b815180151581146111ed57600080fd5b6000602082840312156127b057600080fd5b5035919050565b600080604083850312156127ca57600080fd5b8235915060208301356127dc81612c28565b809150509250929050565b600080604083850312156127fa57600080fd5b50508035926020909101359150565b60006020828403121561281b57600080fd5b81356001600160e01b0319811681146111ed57600080fd5b600080610100838503121561284757600080fd5b823561285281612c28565b91506128618460208501612618565b90509250929050565b600060e0828403121561287c57600080fd5b6111ed8383612618565b60006020828403121561289857600080fd5b5051919050565b600081518084526128b7816020860160208601612b32565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612903816017850160208801612b32565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612934816028840160208801612b32565b01602801949350505050565b6001600160a01b039290921682526020820152608060408201819052600090820181905260a06060830181905282015260c00190565b602080825282518282018190526000919060409081850190868401855b828110156129c0576129b084835180518252602090810151910152565b9284019290850190600101612993565b5091979650505050505050565b6020815260006111ed602083018461289f565b6060815260006129f3606083018661289f565b60208301949094525060400152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600080821280156001600160ff1b0384900385131615612a7257612a72612ba4565b600160ff1b8390038412811615612a8b57612a8b612ba4565b50500190565b60008219821115612aa457612aa4612ba4565b500190565b600082612ab857612ab8612bba565b500490565b6000816000190483118215151615612ad757612ad7612ba4565b500290565b60008083128015600160ff1b850184121615612afa57612afa612ba4565b6001600160ff1b0384018313811615612b1557612b15612ba4565b50500390565b600082821015612b2d57612b2d612ba4565b500390565b60005b83811015612b4d578181015183820152602001612b35565b8381111561180e5750506000910152565b600081612b6d57612b6d612ba4565b506000190190565b6000600019821415612b8957612b89612ba4565b5060010190565b600082612b9f57612b9f612bba565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a4457600080fdfe6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9ba2646970667358221220bc5b565226c2516fb9a625f40faf36e0183f01a12ef2c65cf83691b21e67fc8b64736f6c63430008070033",
}

// StakePoolABI is the input ABI used to generate the binding from.
// Deprecated: Use StakePoolMetaData.ABI instead.
var StakePoolABI = StakePoolMetaData.ABI

// StakePoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakePoolMetaData.Bin instead.
var StakePoolBin = StakePoolMetaData.Bin

// DeployStakePool deploys a new Ethereum contract, binding an instance of StakePool to it.
func DeployStakePool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakePool, error) {
	parsed, err := StakePoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakePoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakePool{StakePoolCaller: StakePoolCaller{contract: contract}, StakePoolTransactor: StakePoolTransactor{contract: contract}, StakePoolFilterer: StakePoolFilterer{contract: contract}}, nil
}

// StakePool is an auto generated Go binding around an Ethereum contract.
type StakePool struct {
	StakePoolCaller     // Read-only binding to the contract
	StakePoolTransactor // Write-only binding to the contract
	StakePoolFilterer   // Log filterer for contract events
}

// StakePoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakePoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakePoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakePoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakePoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakePoolSession struct {
	Contract     *StakePool        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakePoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakePoolCallerSession struct {
	Contract *StakePoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StakePoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakePoolTransactorSession struct {
	Contract     *StakePoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StakePoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakePoolRaw struct {
	Contract *StakePool // Generic contract binding to access the raw methods on
}

// StakePoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakePoolCallerRaw struct {
	Contract *StakePoolCaller // Generic read-only contract binding to access the raw methods on
}

// StakePoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakePoolTransactorRaw struct {
	Contract *StakePoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakePool creates a new instance of StakePool, bound to a specific deployed contract.
func NewStakePool(address common.Address, backend bind.ContractBackend) (*StakePool, error) {
	contract, err := bindStakePool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakePool{StakePoolCaller: StakePoolCaller{contract: contract}, StakePoolTransactor: StakePoolTransactor{contract: contract}, StakePoolFilterer: StakePoolFilterer{contract: contract}}, nil
}

// NewStakePoolCaller creates a new read-only instance of StakePool, bound to a specific deployed contract.
func NewStakePoolCaller(address common.Address, caller bind.ContractCaller) (*StakePoolCaller, error) {
	contract, err := bindStakePool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakePoolCaller{contract: contract}, nil
}

// NewStakePoolTransactor creates a new write-only instance of StakePool, bound to a specific deployed contract.
func NewStakePoolTransactor(address common.Address, transactor bind.ContractTransactor) (*StakePoolTransactor, error) {
	contract, err := bindStakePool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakePoolTransactor{contract: contract}, nil
}

// NewStakePoolFilterer creates a new log filterer instance of StakePool, bound to a specific deployed contract.
func NewStakePoolFilterer(address common.Address, filterer bind.ContractFilterer) (*StakePoolFilterer, error) {
	contract, err := bindStakePool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakePoolFilterer{contract: contract}, nil
}

// bindStakePool binds a generic wrapper to an already deployed contract.
func bindStakePool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakePoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakePool *StakePoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakePool.Contract.StakePoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakePool *StakePoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.Contract.StakePoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakePool *StakePoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakePool.Contract.StakePoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakePool *StakePoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakePool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakePool *StakePoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakePool *StakePoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakePool.Contract.contract.Transact(opts, method, params...)
}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCaller) BOTROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "BOT_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolSession) BOTROLE() ([32]byte, error) {
	return _StakePool.Contract.BOTROLE(&_StakePool.CallOpts)
}

// BOTROLE is a free data retrieval call binding the contract method 0xb1503774.
//
// Solidity: function BOT_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCallerSession) BOTROLE() ([32]byte, error) {
	return _StakePool.Contract.BOTROLE(&_StakePool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _StakePool.Contract.DEFAULTADMINROLE(&_StakePool.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_StakePool *StakePoolCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _StakePool.Contract.DEFAULTADMINROLE(&_StakePool.CallOpts)
}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolCaller) AddressStore(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "addressStore")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolSession) AddressStore() (common.Address, error) {
	return _StakePool.Contract.AddressStore(&_StakePool.CallOpts)
}

// AddressStore is a free data retrieval call binding the contract method 0xc773c8f7.
//
// Solidity: function addressStore() view returns(address)
func (_StakePool *StakePoolCallerSession) AddressStore() (common.Address, error) {
	return _StakePool.Contract.AddressStore(&_StakePool.CallOpts)
}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolCaller) BnbToUnbond(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "bnbToUnbond")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolSession) BnbToUnbond() (*big.Int, error) {
	return _StakePool.Contract.BnbToUnbond(&_StakePool.CallOpts)
}

// BnbToUnbond is a free data retrieval call binding the contract method 0x5d97914c.
//
// Solidity: function bnbToUnbond() view returns(int256)
func (_StakePool *StakePoolCallerSession) BnbToUnbond() (*big.Int, error) {
	return _StakePool.Contract.BnbToUnbond(&_StakePool.CallOpts)
}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolCaller) BnbUnbonding(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "bnbUnbonding")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolSession) BnbUnbonding() (*big.Int, error) {
	return _StakePool.Contract.BnbUnbonding(&_StakePool.CallOpts)
}

// BnbUnbonding is a free data retrieval call binding the contract method 0x6eb95940.
//
// Solidity: function bnbUnbonding() view returns(uint256)
func (_StakePool *StakePoolCallerSession) BnbUnbonding() (*big.Int, error) {
	return _StakePool.Contract.BnbUnbonding(&_StakePool.CallOpts)
}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolCaller) ClaimReqs(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "claimReqs", arg0, arg1)

	outstruct := new(struct {
		WeiToReturn *big.Int
		CreatedAt   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.WeiToReturn = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.CreatedAt = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolSession) ClaimReqs(arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	return _StakePool.Contract.ClaimReqs(&_StakePool.CallOpts, arg0, arg1)
}

// ClaimReqs is a free data retrieval call binding the contract method 0xf773d87d.
//
// Solidity: function claimReqs(address , uint256 ) view returns(uint256 weiToReturn, uint256 createdAt)
func (_StakePool *StakePoolCallerSession) ClaimReqs(arg0 common.Address, arg1 *big.Int) (struct {
	WeiToReturn *big.Int
	CreatedAt   *big.Int
}, error) {
	return _StakePool.Contract.ClaimReqs(&_StakePool.CallOpts, arg0, arg1)
}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolCaller) ClaimReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "claimReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolSession) ClaimReserve() (*big.Int, error) {
	return _StakePool.Contract.ClaimReserve(&_StakePool.CallOpts)
}

// ClaimReserve is a free data retrieval call binding the contract method 0x3fe5f054.
//
// Solidity: function claimReserve() view returns(uint256)
func (_StakePool *StakePoolCallerSession) ClaimReserve() (*big.Int, error) {
	return _StakePool.Contract.ClaimReserve(&_StakePool.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolCaller) Config(opts *bind.CallOpts) (struct {
	BcStakingWallet    common.Address
	MinBNBDeposit      *big.Int
	MinTokenWithdrawal *big.Int
	CooldownPeriod     *big.Int
	Fee                FeeDistributionData
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		BcStakingWallet    common.Address
		MinBNBDeposit      *big.Int
		MinTokenWithdrawal *big.Int
		CooldownPeriod     *big.Int
		Fee                FeeDistributionData
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BcStakingWallet = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.MinBNBDeposit = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinTokenWithdrawal = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CooldownPeriod = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Fee = *abi.ConvertType(out[4], new(FeeDistributionData)).(*FeeDistributionData)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolSession) Config() (struct {
	BcStakingWallet    common.Address
	MinBNBDeposit      *big.Int
	MinTokenWithdrawal *big.Int
	CooldownPeriod     *big.Int
	Fee                FeeDistributionData
}, error) {
	return _StakePool.Contract.Config(&_StakePool.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(address bcStakingWallet, uint256 minBNBDeposit, uint256 minTokenWithdrawal, uint256 cooldownPeriod, (uint256,uint256,uint256) fee)
func (_StakePool *StakePoolCallerSession) Config() (struct {
	BcStakingWallet    common.Address
	MinBNBDeposit      *big.Int
	MinTokenWithdrawal *big.Int
	CooldownPeriod     *big.Int
	Fee                FeeDistributionData
}, error) {
	return _StakePool.Contract.Config(&_StakePool.CallOpts)
}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolCaller) ExchangeRate(opts *bind.CallOpts) (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "exchangeRate")

	outstruct := new(struct {
		TotalWei        *big.Int
		PoolTokenSupply *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalWei = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PoolTokenSupply = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolSession) ExchangeRate() (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	return _StakePool.Contract.ExchangeRate(&_StakePool.CallOpts)
}

// ExchangeRate is a free data retrieval call binding the contract method 0x3ba0b9a9.
//
// Solidity: function exchangeRate() view returns(uint256 totalWei, uint256 poolTokenSupply)
func (_StakePool *StakePoolCallerSession) ExchangeRate() (struct {
	TotalWei        *big.Int
	PoolTokenSupply *big.Int
}, error) {
	return _StakePool.Contract.ExchangeRate(&_StakePool.CallOpts)
}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolCaller) GetClaimRequestCount(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getClaimRequestCount", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolSession) GetClaimRequestCount(user common.Address) (*big.Int, error) {
	return _StakePool.Contract.GetClaimRequestCount(&_StakePool.CallOpts, user)
}

// GetClaimRequestCount is a free data retrieval call binding the contract method 0x8be78083.
//
// Solidity: function getClaimRequestCount(address user) view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetClaimRequestCount(user common.Address) (*big.Int, error) {
	return _StakePool.Contract.GetClaimRequestCount(&_StakePool.CallOpts, user)
}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolCaller) GetPaginatedClaimRequests(opts *bind.CallOpts, user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getPaginatedClaimRequests", user, from, to)

	if err != nil {
		return *new([]StakePoolClaimRequest), err
	}

	out0 := *abi.ConvertType(out[0], new([]StakePoolClaimRequest)).(*[]StakePoolClaimRequest)

	return out0, err

}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolSession) GetPaginatedClaimRequests(user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	return _StakePool.Contract.GetPaginatedClaimRequests(&_StakePool.CallOpts, user, from, to)
}

// GetPaginatedClaimRequests is a free data retrieval call binding the contract method 0x75ccc37a.
//
// Solidity: function getPaginatedClaimRequests(address user, uint256 from, uint256 to) view returns((uint256,uint256)[])
func (_StakePool *StakePoolCallerSession) GetPaginatedClaimRequests(user common.Address, from *big.Int, to *big.Int) ([]StakePoolClaimRequest, error) {
	return _StakePool.Contract.GetPaginatedClaimRequests(&_StakePool.CallOpts, user, from, to)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _StakePool.Contract.GetRoleAdmin(&_StakePool.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_StakePool *StakePoolCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _StakePool.Contract.GetRoleAdmin(&_StakePool.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _StakePool.Contract.GetRoleMember(&_StakePool.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_StakePool *StakePoolCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _StakePool.Contract.GetRoleMember(&_StakePool.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _StakePool.Contract.GetRoleMemberCount(&_StakePool.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _StakePool.Contract.GetRoleMemberCount(&_StakePool.CallOpts, role)
}

// GetStakableBNB is a free data retrieval call binding the contract method 0x7550c050.
//
// Solidity: function getStakableBNB() view returns(uint256)
func (_StakePool *StakePoolCaller) GetStakableBNB(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "getStakableBNB")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakableBNB is a free data retrieval call binding the contract method 0x7550c050.
//
// Solidity: function getStakableBNB() view returns(uint256)
func (_StakePool *StakePoolSession) GetStakableBNB() (*big.Int, error) {
	return _StakePool.Contract.GetStakableBNB(&_StakePool.CallOpts)
}

// GetStakableBNB is a free data retrieval call binding the contract method 0x7550c050.
//
// Solidity: function getStakableBNB() view returns(uint256)
func (_StakePool *StakePoolCallerSession) GetStakableBNB() (*big.Int, error) {
	return _StakePool.Contract.GetStakableBNB(&_StakePool.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _StakePool.Contract.HasRole(&_StakePool.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_StakePool *StakePoolCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _StakePool.Contract.HasRole(&_StakePool.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolSession) Paused() (bool, error) {
	return _StakePool.Contract.Paused(&_StakePool.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StakePool *StakePoolCallerSession) Paused() (bool, error) {
	return _StakePool.Contract.Paused(&_StakePool.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakePool.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakePool.Contract.SupportsInterface(&_StakePool.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakePool *StakePoolCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakePool.Contract.SupportsInterface(&_StakePool.CallOpts, interfaceId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolTransactor) Claim(opts *bind.TransactOpts, index *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "claim", index)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolSession) Claim(index *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.Claim(&_StakePool.TransactOpts, index)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 index) returns()
func (_StakePool *StakePoolTransactorSession) Claim(index *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.Claim(&_StakePool.TransactOpts, index)
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolTransactor) ClaimAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "claimAll")
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolSession) ClaimAll() (*types.Transaction, error) {
	return _StakePool.Contract.ClaimAll(&_StakePool.TransactOpts)
}

// ClaimAll is a paid mutator transaction binding the contract method 0xd1058e59.
//
// Solidity: function claimAll() returns()
func (_StakePool *StakePoolTransactorSession) ClaimAll() (*types.Transaction, error) {
	return _StakePool.Contract.ClaimAll(&_StakePool.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolSession) Deposit() (*types.Transaction, error) {
	return _StakePool.Contract.Deposit(&_StakePool.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_StakePool *StakePoolTransactorSession) Deposit() (*types.Transaction, error) {
	return _StakePool.Contract.Deposit(&_StakePool.TransactOpts)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolTransactor) EpochUpdate(opts *bind.TransactOpts, bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "epochUpdate", bnbRewards)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolSession) EpochUpdate(bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.EpochUpdate(&_StakePool.TransactOpts, bnbRewards)
}

// EpochUpdate is a paid mutator transaction binding the contract method 0x72bd5c94.
//
// Solidity: function epochUpdate(uint256 bnbRewards) returns()
func (_StakePool *StakePoolTransactorSession) EpochUpdate(bnbRewards *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.EpochUpdate(&_StakePool.TransactOpts, bnbRewards)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.GrantRole(&_StakePool.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.GrantRole(&_StakePool.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x1bdac81a.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactor) Initialize(opts *bind.TransactOpts, addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "initialize", addressStore_, config_)
}

// Initialize is a paid mutator transaction binding the contract method 0x1bdac81a.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolSession) Initialize(addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.Initialize(&_StakePool.TransactOpts, addressStore_, config_)
}

// Initialize is a paid mutator transaction binding the contract method 0x1bdac81a.
//
// Solidity: function initialize(address addressStore_, (address,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactorSession) Initialize(addressStore_ common.Address, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.Initialize(&_StakePool.TransactOpts, addressStore_, config_)
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns(uint256)
func (_StakePool *StakePoolTransactor) InitiateDelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "initiateDelegation")
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns(uint256)
func (_StakePool *StakePoolSession) InitiateDelegation() (*types.Transaction, error) {
	return _StakePool.Contract.InitiateDelegation(&_StakePool.TransactOpts)
}

// InitiateDelegation is a paid mutator transaction binding the contract method 0xfa6c2f7d.
//
// Solidity: function initiateDelegation() returns(uint256)
func (_StakePool *StakePoolTransactorSession) InitiateDelegation() (*types.Transaction, error) {
	return _StakePool.Contract.InitiateDelegation(&_StakePool.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolSession) Pause() (*types.Transaction, error) {
	return _StakePool.Contract.Pause(&_StakePool.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StakePool *StakePoolTransactorSession) Pause() (*types.Transaction, error) {
	return _StakePool.Contract.Pause(&_StakePool.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RenounceRole(&_StakePool.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RenounceRole(&_StakePool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RevokeRole(&_StakePool.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_StakePool *StakePoolTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _StakePool.Contract.RevokeRole(&_StakePool.TransactOpts, role, account)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolTransactor) TokensReceived(opts *bind.TransactOpts, arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "tokensReceived", arg0, from, to, amount, arg4, arg5)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolSession) TokensReceived(arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.Contract.TokensReceived(&_StakePool.TransactOpts, arg0, from, to, amount, arg4, arg5)
}

// TokensReceived is a paid mutator transaction binding the contract method 0x0023de29.
//
// Solidity: function tokensReceived(address , address from, address to, uint256 amount, bytes , bytes ) returns()
func (_StakePool *StakePoolTransactorSession) TokensReceived(arg0 common.Address, from common.Address, to common.Address, amount *big.Int, arg4 []byte, arg5 []byte) (*types.Transaction, error) {
	return _StakePool.Contract.TokensReceived(&_StakePool.TransactOpts, arg0, from, to, amount, arg4, arg5)
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolTransactor) UnbondingFinished(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unbondingFinished")
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolSession) UnbondingFinished() (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingFinished(&_StakePool.TransactOpts)
}

// UnbondingFinished is a paid mutator transaction binding the contract method 0x54cc6d9d.
//
// Solidity: function unbondingFinished() returns()
func (_StakePool *StakePoolTransactorSession) UnbondingFinished() (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingFinished(&_StakePool.TransactOpts)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 _bnbUnbonding) returns()
func (_StakePool *StakePoolTransactor) UnbondingInitiated(opts *bind.TransactOpts, _bnbUnbonding *big.Int) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unbondingInitiated", _bnbUnbonding)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 _bnbUnbonding) returns()
func (_StakePool *StakePoolSession) UnbondingInitiated(_bnbUnbonding *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingInitiated(&_StakePool.TransactOpts, _bnbUnbonding)
}

// UnbondingInitiated is a paid mutator transaction binding the contract method 0x8b2bf29f.
//
// Solidity: function unbondingInitiated(uint256 _bnbUnbonding) returns()
func (_StakePool *StakePoolTransactorSession) UnbondingInitiated(_bnbUnbonding *big.Int) (*types.Transaction, error) {
	return _StakePool.Contract.UnbondingInitiated(&_StakePool.TransactOpts, _bnbUnbonding)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolSession) Unpause() (*types.Transaction, error) {
	return _StakePool.Contract.Unpause(&_StakePool.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StakePool *StakePoolTransactorSession) Unpause() (*types.Transaction, error) {
	return _StakePool.Contract.Unpause(&_StakePool.TransactOpts)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x40f63e48.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactor) UpdateConfig(opts *bind.TransactOpts, config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.contract.Transact(opts, "updateConfig", config_)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x40f63e48.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolSession) UpdateConfig(config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.UpdateConfig(&_StakePool.TransactOpts, config_)
}

// UpdateConfig is a paid mutator transaction binding the contract method 0x40f63e48.
//
// Solidity: function updateConfig((address,uint256,uint256,uint256,(uint256,uint256,uint256)) config_) returns()
func (_StakePool *StakePoolTransactorSession) UpdateConfig(config_ ConfigData) (*types.Transaction, error) {
	return _StakePool.Contract.UpdateConfig(&_StakePool.TransactOpts, config_)
}

// StakePoolClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the StakePool contract.
type StakePoolClaimIterator struct {
	Event *StakePoolClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolClaim represents a Claim event raised by the StakePool contract.
type StakePoolClaim struct {
	User      common.Address
	Req       StakePoolClaimRequest
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterClaim(opts *bind.FilterOpts, user []common.Address) (*StakePoolClaimIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Claim", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolClaimIterator{contract: _StakePool.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *StakePoolClaim, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Claim", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolClaim)
				if err := _StakePool.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x68b2280298dbae04fabb3ba3aec3f939aebaf17f3b57811225a496cafee6f9c6.
//
// Solidity: event Claim(address indexed user, (uint256,uint256) req, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseClaim(log types.Log) (*StakePoolClaim, error) {
	event := new(StakePoolClaim)
	if err := _StakePool.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolConfigUpdatedIterator is returned from FilterConfigUpdated and is used to iterate over the raw logs and unpacked data for ConfigUpdated events raised by the StakePool contract.
type StakePoolConfigUpdatedIterator struct {
	Event *StakePoolConfigUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolConfigUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolConfigUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolConfigUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolConfigUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolConfigUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolConfigUpdated represents a ConfigUpdated event raised by the StakePool contract.
type StakePoolConfigUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterConfigUpdated is a free log retrieval operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) FilterConfigUpdated(opts *bind.FilterOpts) (*StakePoolConfigUpdatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "ConfigUpdated")
	if err != nil {
		return nil, err
	}
	return &StakePoolConfigUpdatedIterator{contract: _StakePool.contract, event: "ConfigUpdated", logs: logs, sub: sub}, nil
}

// WatchConfigUpdated is a free log subscription operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) WatchConfigUpdated(opts *bind.WatchOpts, sink chan<- *StakePoolConfigUpdated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "ConfigUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolConfigUpdated)
				if err := _StakePool.contract.UnpackLog(event, "ConfigUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigUpdated is a log parse operation binding the contract event 0xfe891c6ab12cf73707f8deb6600c12ba382e4cc31eb2b0a2754cad13075ed2d1.
//
// Solidity: event ConfigUpdated()
func (_StakePool *StakePoolFilterer) ParseConfigUpdated(log types.Log) (*StakePoolConfigUpdated, error) {
	event := new(StakePoolConfigUpdated)
	if err := _StakePool.contract.UnpackLog(event, "ConfigUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolDelegationInitiatedIterator is returned from FilterDelegationInitiated and is used to iterate over the raw logs and unpacked data for DelegationInitiated events raised by the StakePool contract.
type StakePoolDelegationInitiatedIterator struct {
	Event *StakePoolDelegationInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolDelegationInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolDelegationInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolDelegationInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolDelegationInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolDelegationInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolDelegationInitiated represents a DelegationInitiated event raised by the StakePool contract.
type StakePoolDelegationInitiated struct {
	StakableBNB *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDelegationInitiated is a free log retrieval operation binding the contract event 0x2ca01315053cca0f4d111bf98e740fe5c02bc603936c60659c8502e644c2e773.
//
// Solidity: event DelegationInitiated(uint256 stakableBNB)
func (_StakePool *StakePoolFilterer) FilterDelegationInitiated(opts *bind.FilterOpts) (*StakePoolDelegationInitiatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "DelegationInitiated")
	if err != nil {
		return nil, err
	}
	return &StakePoolDelegationInitiatedIterator{contract: _StakePool.contract, event: "DelegationInitiated", logs: logs, sub: sub}, nil
}

// WatchDelegationInitiated is a free log subscription operation binding the contract event 0x2ca01315053cca0f4d111bf98e740fe5c02bc603936c60659c8502e644c2e773.
//
// Solidity: event DelegationInitiated(uint256 stakableBNB)
func (_StakePool *StakePoolFilterer) WatchDelegationInitiated(opts *bind.WatchOpts, sink chan<- *StakePoolDelegationInitiated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "DelegationInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolDelegationInitiated)
				if err := _StakePool.contract.UnpackLog(event, "DelegationInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegationInitiated is a log parse operation binding the contract event 0x2ca01315053cca0f4d111bf98e740fe5c02bc603936c60659c8502e644c2e773.
//
// Solidity: event DelegationInitiated(uint256 stakableBNB)
func (_StakePool *StakePoolFilterer) ParseDelegationInitiated(log types.Log) (*StakePoolDelegationInitiated, error) {
	event := new(StakePoolDelegationInitiated)
	if err := _StakePool.contract.UnpackLog(event, "DelegationInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the StakePool contract.
type StakePoolDepositIterator struct {
	Event *StakePoolDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolDeposit represents a Deposit event raised by the StakePool contract.
type StakePoolDeposit struct {
	User            common.Address
	BnbAmount       *big.Int
	PoolTokenAmount *big.Int
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterDeposit(opts *bind.FilterOpts, user []common.Address) (*StakePoolDepositIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolDepositIterator{contract: _StakePool.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *StakePoolDeposit, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Deposit", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolDeposit)
				if err := _StakePool.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed user, uint256 bnbAmount, uint256 poolTokenAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseDeposit(log types.Log) (*StakePoolDeposit, error) {
	event := new(StakePoolDeposit)
	if err := _StakePool.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolEpochUpdateIterator is returned from FilterEpochUpdate and is used to iterate over the raw logs and unpacked data for EpochUpdate events raised by the StakePool contract.
type StakePoolEpochUpdateIterator struct {
	Event *StakePoolEpochUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolEpochUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolEpochUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolEpochUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolEpochUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolEpochUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolEpochUpdate represents a EpochUpdate event raised by the StakePool contract.
type StakePoolEpochUpdate struct {
	BnbRewards *big.Int
	FeeTokens  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEpochUpdate is a free log retrieval operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) FilterEpochUpdate(opts *bind.FilterOpts) (*StakePoolEpochUpdateIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "EpochUpdate")
	if err != nil {
		return nil, err
	}
	return &StakePoolEpochUpdateIterator{contract: _StakePool.contract, event: "EpochUpdate", logs: logs, sub: sub}, nil
}

// WatchEpochUpdate is a free log subscription operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) WatchEpochUpdate(opts *bind.WatchOpts, sink chan<- *StakePoolEpochUpdate) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "EpochUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolEpochUpdate)
				if err := _StakePool.contract.UnpackLog(event, "EpochUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochUpdate is a log parse operation binding the contract event 0xcb62e14f4587604f4099c842d98789e47ebdd0ccbf6fd86a0581aa337a602eb1.
//
// Solidity: event EpochUpdate(uint256 bnbRewards, uint256 feeTokens)
func (_StakePool *StakePoolFilterer) ParseEpochUpdate(log types.Log) (*StakePoolEpochUpdate, error) {
	event := new(StakePoolEpochUpdate)
	if err := _StakePool.contract.UnpackLog(event, "EpochUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StakePool contract.
type StakePoolInitializedIterator struct {
	Event *StakePoolInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolInitialized represents a Initialized event raised by the StakePool contract.
type StakePoolInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakePoolInitializedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakePoolInitializedIterator{contract: _StakePool.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakePoolInitialized) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolInitialized)
				if err := _StakePool.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakePool *StakePoolFilterer) ParseInitialized(log types.Log) (*StakePoolInitialized, error) {
	event := new(StakePoolInitialized)
	if err := _StakePool.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the StakePool contract.
type StakePoolPausedIterator struct {
	Event *StakePoolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolPaused represents a Paused event raised by the StakePool contract.
type StakePoolPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) FilterPaused(opts *bind.FilterOpts) (*StakePoolPausedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StakePoolPausedIterator{contract: _StakePool.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StakePoolPaused) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolPaused)
				if err := _StakePool.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StakePool *StakePoolFilterer) ParsePaused(log types.Log) (*StakePoolPaused, error) {
	event := new(StakePoolPaused)
	if err := _StakePool.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the StakePool contract.
type StakePoolRoleAdminChangedIterator struct {
	Event *StakePoolRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleAdminChanged represents a RoleAdminChanged event raised by the StakePool contract.
type StakePoolRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*StakePoolRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleAdminChangedIterator{contract: _StakePool.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *StakePoolRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleAdminChanged)
				if err := _StakePool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_StakePool *StakePoolFilterer) ParseRoleAdminChanged(log types.Log) (*StakePoolRoleAdminChanged, error) {
	event := new(StakePoolRoleAdminChanged)
	if err := _StakePool.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the StakePool contract.
type StakePoolRoleGrantedIterator struct {
	Event *StakePoolRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleGranted represents a RoleGranted event raised by the StakePool contract.
type StakePoolRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*StakePoolRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleGrantedIterator{contract: _StakePool.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *StakePoolRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleGranted)
				if err := _StakePool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) ParseRoleGranted(log types.Log) (*StakePoolRoleGranted, error) {
	event := new(StakePoolRoleGranted)
	if err := _StakePool.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the StakePool contract.
type StakePoolRoleRevokedIterator struct {
	Event *StakePoolRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolRoleRevoked represents a RoleRevoked event raised by the StakePool contract.
type StakePoolRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*StakePoolRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolRoleRevokedIterator{contract: _StakePool.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *StakePoolRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolRoleRevoked)
				if err := _StakePool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_StakePool *StakePoolFilterer) ParseRoleRevoked(log types.Log) (*StakePoolRoleRevoked, error) {
	event := new(StakePoolRoleRevoked)
	if err := _StakePool.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnbondingFinishedIterator is returned from FilterUnbondingFinished and is used to iterate over the raw logs and unpacked data for UnbondingFinished events raised by the StakePool contract.
type StakePoolUnbondingFinishedIterator struct {
	Event *StakePoolUnbondingFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnbondingFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnbondingFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnbondingFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnbondingFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnbondingFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnbondingFinished represents a UnbondingFinished event raised by the StakePool contract.
type StakePoolUnbondingFinished struct {
	UnbondedAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnbondingFinished is a free log retrieval operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) FilterUnbondingFinished(opts *bind.FilterOpts) (*StakePoolUnbondingFinishedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "UnbondingFinished")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnbondingFinishedIterator{contract: _StakePool.contract, event: "UnbondingFinished", logs: logs, sub: sub}, nil
}

// WatchUnbondingFinished is a free log subscription operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) WatchUnbondingFinished(opts *bind.WatchOpts, sink chan<- *StakePoolUnbondingFinished) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "UnbondingFinished")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnbondingFinished)
				if err := _StakePool.contract.UnpackLog(event, "UnbondingFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingFinished is a log parse operation binding the contract event 0x31690952e66f4ee8423e3087dcbc0687ddee8d263986b865229aee4ebdbafea5.
//
// Solidity: event UnbondingFinished(uint256 unbondedAmount)
func (_StakePool *StakePoolFilterer) ParseUnbondingFinished(log types.Log) (*StakePoolUnbondingFinished, error) {
	event := new(StakePoolUnbondingFinished)
	if err := _StakePool.contract.UnpackLog(event, "UnbondingFinished", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnbondingInitiatedIterator is returned from FilterUnbondingInitiated and is used to iterate over the raw logs and unpacked data for UnbondingInitiated events raised by the StakePool contract.
type StakePoolUnbondingInitiatedIterator struct {
	Event *StakePoolUnbondingInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnbondingInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnbondingInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnbondingInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnbondingInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnbondingInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnbondingInitiated represents a UnbondingInitiated event raised by the StakePool contract.
type StakePoolUnbondingInitiated struct {
	BnbUnbonding *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUnbondingInitiated is a free log retrieval operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) FilterUnbondingInitiated(opts *bind.FilterOpts) (*StakePoolUnbondingInitiatedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "UnbondingInitiated")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnbondingInitiatedIterator{contract: _StakePool.contract, event: "UnbondingInitiated", logs: logs, sub: sub}, nil
}

// WatchUnbondingInitiated is a free log subscription operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) WatchUnbondingInitiated(opts *bind.WatchOpts, sink chan<- *StakePoolUnbondingInitiated) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "UnbondingInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnbondingInitiated)
				if err := _StakePool.contract.UnpackLog(event, "UnbondingInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingInitiated is a log parse operation binding the contract event 0xfcfebef86ea31f185fe5d81c5fe96ba3835d0e293f58bb5d33907c3c1522ba87.
//
// Solidity: event UnbondingInitiated(uint256 bnbUnbonding)
func (_StakePool *StakePoolFilterer) ParseUnbondingInitiated(log types.Log) (*StakePoolUnbondingInitiated, error) {
	event := new(StakePoolUnbondingInitiated)
	if err := _StakePool.contract.UnpackLog(event, "UnbondingInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the StakePool contract.
type StakePoolUnpausedIterator struct {
	Event *StakePoolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolUnpaused represents a Unpaused event raised by the StakePool contract.
type StakePoolUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*StakePoolUnpausedIterator, error) {

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StakePoolUnpausedIterator{contract: _StakePool.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StakePoolUnpaused) (event.Subscription, error) {

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolUnpaused)
				if err := _StakePool.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StakePool *StakePoolFilterer) ParseUnpaused(log types.Log) (*StakePoolUnpaused, error) {
	event := new(StakePoolUnpaused)
	if err := _StakePool.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakePoolWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the StakePool contract.
type StakePoolWithdrawIterator struct {
	Event *StakePoolWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakePoolWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakePoolWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakePoolWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakePoolWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakePoolWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakePoolWithdraw represents a Withdraw event raised by the StakePool contract.
type StakePoolWithdraw struct {
	User            common.Address
	PoolTokenAmount *big.Int
	BnbAmount       *big.Int
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) FilterWithdraw(opts *bind.FilterOpts, user []common.Address) (*StakePoolWithdrawIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.FilterLogs(opts, "Withdraw", userRule)
	if err != nil {
		return nil, err
	}
	return &StakePoolWithdrawIterator{contract: _StakePool.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StakePoolWithdraw, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _StakePool.contract.WatchLogs(opts, "Withdraw", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakePoolWithdraw)
				if err := _StakePool.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed user, uint256 poolTokenAmount, uint256 bnbAmount, uint256 timestamp)
func (_StakePool *StakePoolFilterer) ParseWithdraw(log types.Log) (*StakePoolWithdraw, error) {
	event := new(StakePoolWithdraw)
	if err := _StakePool.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
